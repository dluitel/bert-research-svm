
    1. INTRODUCTION
The Functional Requirements Specifications (FRS) report provides the detailed description of the functionalities required for the first version of the CCTNS. The key guiding principle behind the functional design of CCTNS V1.0 is to focus on the critical functionality that provides value to the police personnel at the cutting edge which in turn can improve the outcomes in the areas of “Investigation of Crime” and “Detection of Criminals”.

    2. FUNCTIONAL OVERVIEW
CCTNS V1.0 functionality is designed to focus on delivering value to IOs, records room staff and citizens within the broad crime investigation area. Based on the guiding principles stated above, nine different function blocks have been identified and the detailed functionality of each block was determined.

    3. DESCRIPTION OF THE MODULES AND FUNCTIONAL REQUIREMENTS
The functionality of the CCTNS application is focused on providing value to the police personnel, especially the officers operating at the cutting edge and easing the day to day operations of the police function.
Registration
Citizens can register their complaints with police and then based on the evidence, facts and following investigation, police shall take the complaint forward. The Registration module acts as an interface between the police and citizens and it eases the approach, interaction and information exchange between police and complainants.
Investigation
After a complaint is initiated, police initiates the investigation process. The Investigation module of the CCTNS facilitates the investigation process and introduces operational efficiencies by automating most of the tasks that take place after initial entries are made during Registration.
Prosecution
Interfacing with the courts during the prosecution of cases is an integral part of the responsibilities of police personnel. A designated constable from each police station constantly interfaces with the courts. The Prosecution module of the CCTNS aids this interfacing by providing a platform to record entries of the court interactions.
Search
The Search module of the CCTNS gives police personnel the ability to execute a basic or advanced search on cases. Using the search functionality, police personnel can search for a particular person, type of crime, modus operandi, property etc. It also gives the user the ability to customize the results view by criminal/accused or by cases. It makes reporting easy for police by enabling them to execute different types of queries such as monthly reporting, RTI related etc.

   Citizen Interface
The Citizen Interface module of the CCTNS acts as a conduit for the information exchange between citizens and police units/personnel. Citizens can use it as a tool to get information or acknowledgements from police. The police in turn can use it to respond to citizens with very little turnaround time. It improves overall productivity by helping citizens and police to cut short the drudgery of large amounts of paperwork.
Navigation
The Navigation module of the CCTNS provides role based landing pages which help in navigating through the CCTNS application. It shows information such as cases assigned, alerts, pending tasks etc hence helping police personnel to plan better and execute with greater efficiency.
Application Configuration
The Configuration module of the CCTNS helps keep the application configured according to the states’ requirements in addition to keeping data elements/rules up to date. With a proper configuration, information such as act and sections, state specific data, castes, tribes, property information etc. can be created updated and deleted.
The functional requirements for each of the modules are provided as A1 to A7 in separate enclosures.

    4. NON-FUNCTIONAL REQUIREMENTS
The non-functional requirements specify the qualitative attributes such as user-friendliness and performance of the system that are critical for the increased user-acceptance of the application.
  Help Module
     1.The solution should provide detailed context-sensitive help material for all the possible actions and scenarios on all user interfaces in the application.
  2. The help should be accessible to the users both in the offline and online mode
   Support Module
     1. The solution should provide an interface for the user to log any defects or enhancement requests on the application and track thereafter.
    2. The solution should send alerts (e.g., email, SMS) to the user if the user chooses to whenever any action has been taken on the alert
    3. The solution should enable the user to track the submitted defect or enhancement request.
    4. The solution should enable the help-desk user to view the reports on the submitted defects or enhancement requests category-wise, status-wise, and age- wise.
    5. The support solution should be accessible to the users both from within the application and also outside the application through a browser interface.
   Audit Module
     1. An audit trail is a record of actions taken by either the user or the system triggers. This includes actions taken by users or Administrators, or actions initiated automatically by the system as a result of system parameters. The System must keep an unalterable audit trail capable of automatically capturing and storing information about:
• All the actions (create/read/update/delete) that are taken upon the critical entities (case, suspect, property,...) in the system
• The user initiating and or carrying out the action;
• The date and time of the event.

          • Administrative parameters
The word “unalterable” is to mean that the audit trail data cannot be modified in any way or deleted by any user; it may be subject to re-department and copying to removable media if required, so long as its contents remain unchanged.
    2. Once the audit trail functionality has been activated, the System must track events without manual intervention, and store in the audit trail information about them.
  3. The System must maintain the audit trail for as long as required, which will be at least for the life of the case to which it refers.
    4. The System must ensure that audit trail data is available for inspection on request, so that a specific event can be identified and all related data made accessible, and that this can be achieved by authorised external personnel who have little or no familiarity with the system.
    5. The System must be able to export audit trails for specified cases (without affecting the audit trail stored by the System). This functionality can be used by external auditors who wish to examine or analyse system activity.
    6. The System must be able to capture and store violations (i.e. A user’s attempts to access a case to which he is denied access), and (where violations can validly be attempted) attempted violations, of access control mechanisms.
    7. The System must at a minimum be able to provide reports for actions on cases organised:
• By case;
• By user;
• In chronological sequence.
  8. The System should be able to provide reports for actions on cases organised by workstation and (where technically appropriate) by network address.
 The requirements specify the requirements to control the user access to correspondences, files, and records and various functionalities provided within the system.
  Access Module
   1. The System must allow the user to limit access to cases to specified users or user groups.
  2. The system should provide for role-based control for the functionality within the system.
  3. The System must allow a user to be a member of more than one group.
  4. The System must allow only admin-users to set up user profiles and allocate users to groups.
  5. The System should allow a user to stipulate which other users or groups can access cases.
    6. The System must allow changes to security attributes for groups or users (such as access rights, security level, privileges, password allocation and management) to be made only by super-user.
    7. If a user requests access to, or searches for, a case which he does not have the right to access, the System must provide one of the following responses (selectable at configuration time):
• display title and metadata;
• display the existence of a case but not its title or other metadata;
• do not display any case information or indicate its existence in any way.
These options are presented in order of increasing security. Note that the requirement in the third option (i.e. the most stringent) implies that the System must not include such cases in any count of search results; this level of security is normally appropriate for cases dealing with matters such as national security.
  8. If a user performs a quick or advanced search, the System must never include in the search result list any record which the user does not have the right to access.
  9. If the System allows users to make unauthorised attempts to access cases, it must log these in the audit trail.
    10. Any access to cases, and all other activities involving the cases and related documents or data should also need to be stored in the audit trail to ensure legal admissibility and to assist in data recovery.
   Ease of Use
     1. All error messages produced by the System must be meaningful, so that they can be appropriately acted upon by the users who are likely to see them. Ideally, each error message will be accompanied by explanatory text and an indication of the action(s) which the user can take in response to the error.
  2. The System must employ a single set of user interface rules, or a small number of sets to provide a familiar and common look and feel for the application.

     3. The System must be able to display several entities (cases, suspects) simultaneously.
    4. The interfaces must be made customizable or user-configurable to the extent possible. (e.g., the displayed columns in the table, move, resize, modify the appearance). Such configurations must be saved in the user profile.
    5. The System user interface must be suitable for users with special needs; that is, compatible with specialist software that may be used and with appropriate interface guidelines
  6. The System must provide End User and Administrator functions which are easy to use and intuitive throughout.
    7. The System must allow persistent defaults for data entry where desirable. These defaults should include:
• user-definable values;
• values same as previous item;
• values derived from context, e.g. date, file reference, user identifier;
  8. Frequently-executed System transactions must be designed so that they can be completed with a small number of interactions (e.g. mouse clicks).
    9. Where the System employs a graphical user interface, it must allow users to customise it. Customisation should include, but need not be limited to the following changes:
• menu contents;
• layout of screens;
• use of function keys;
• on-screen colours, fonts and font sizes;
   Usability
   1. The user interfaces should be designed to make them user-intuitive.
  2. The user interfaces of the system should comply with Standard ISO 9241.
    3. ICT accessibility: ISO 9241-20 shall be the standard for guidance on ICT accessibility. Application user interfaces to meet its requirements and recommendations. Software accessibility ISO 9241-171 shall be the standard for guidance on software accessibility. User interfaces should meet its requirements and recommendations. Content accessibility WCAG 1.0 shall be the standard used for guidance on content accessibility. The application logo to be available on all pages as a link to the home page.

       4. Providing text equivalents for non-text media objects: All non-text media objects, such as graphical images or video, should be provided with alternative equivalent textual descriptions and/or with equivalent text-based functionality.
    5. Making navigation self-descriptive: Navigation should be designed to help users understand where they are, where they have been and where they can go next. General guidance on achieving self-descriptiveness is given in ISO 9241-110.
    6. Showing users where they are: Each presentation segment (page or window) should provide the user with a clear and sufficient indication of where he or she is in the navigation structure and of the current segment position with respect to the overall structure.
    7. Offering alternative access paths: Alternative access paths for navigating to a specific unit of content should be offered to support different navigation strategies.
    8. Minimizing navigation effort: The number of navigation steps needed to reach a certain piece of content should be minimized as long as different mental models, navigation strategies and tasks of the user are taken into account.
    9. Splash screens should be avoided unless they provide useful content or feedback about the application state to the user. If a splash screen is used, a navigation option to skip it should be offered.
    10. Avoiding opening unnecessary windows: Additional windows such as new browser windows or pop-up windows should only be opened if this supports the user’s task. Opening new windows can distract, confuse or impede users for a variety of reasons. They can superimpose the primary window, hiding relevant information. They could make it cognitively more difficult to understand the navigation structure with negative effects on both usability and accessibility. They also require additional user actions for closing unwanted windows.
    11. Vertical scrolling should be minimized. This may be done by placing important information at the top and providing links to information that is further down the page. Horizontal scrolling should be avoided wherever possible.
    12. Designing for input device independence: User interfaces should be designed to allow activation of controls by a variety of input devices. The ability to choose between different input devices for activating controls such as links, fields and buttons is important both for users who prefer a certain input mode, mobile users and users with disabilities. In general, device independence can be achieved if the functionality is operable via a keyboard.
    13. Making user interfaces robust: User interfaces should be designed to be as robust as possible in the face of changing technology. This encompasses being able to present content containing newer technologies by older user agents as well as designing content to be usable with future technologies.
    14. Acceptable opening / download times: Application pages should be designed and implemented so that there are acceptable opening times and download times for the expected range of technical contexts of use (e.g. bandwidth between the application and the user). This is particularly important for frequently accessed pages or pages that are important for user navigation and exploration, such as the home page.
  15. Minimizing user errors: Potential user errors as well as the effort needed to recover from errors should be minimized.
    16. Providing clear error messages: The content of error messages shown on the pages or special error pages should clearly state the reason why the error occurred and, if possible, actions the user can take to resolve the error. Users expect error messages to be in the same language as the user interface.
    17. Using appropriate formats, units of measurement or currency: When designing user interfaces for use by diverse groups, input and output of information elements such as currency, units of measurement, temperatures, date and time, phone numbers, address or postal codes should be designed so that they are usable.
    18. Making text resizable by the user: Text should be able to be resized by the user, using functions provided by the user agent or other appropriate means i.e. see ISO 9241-171.
  19. Text quality: The quality of textual content with respect to spelling and grammar should be sufficient so as not to impede readability.
    20. Writing style: The reading and understanding of the textual content on the screen should be supported by suitable means, including the use of short sentences, the division of the text into shorter chunks or the presentation of content items in the form of bullet points.
    21. Supporting text skimming: Fast skimming of text should be supported by the provision of clear links, bulleted lists, highlighted keywords, logical headings, and short phrases and sentences.
    22. Readability of text: Text presented on the pages should be readable taking into account the expected display characteristics and spatial arrangement. ISO 9241-303 shall be consulted for screen text legibility requirements.
    23. Distinguishable within-page links: Within-page links should be clearly distinguishable from other links that lead to a different page. EX. Within-page links are shown with dashed rather than solid underlines
  24. Avoiding link overload: Text pages containing large proportions of links should be formatted so that the presence of links does not impede the readability of the text.
    25. Using familiar terminology for navigation links: Navigation links — particularly links representing the main navigation structure — should be labelled with terms that are familiar to the user, based on his/her general knowledge, prior experience in the application domain or experience of using other systems.
    26. Using descriptive link labels: The target or purpose of a link should be directly indicated by its label, avoiding generic labels such as “go” or “click here” except where the purpose of the link is clear from its context on the page or the labels have commonly understood semantics in the particular application domain. Using appropriate terminology specific to the user’s tasks and information needs is important for making the content easy to understand.
  27. Marking links opening new windows: Links that open new browser windows or pop-up windows should be clearly marked.
    28. Distinguishing navigation links from controls: Navigation links should be clearly distinguishable from controls activating some action. Typical action types in user interfaces include manipulating application data, performing searches, communication actions, such as opening a new e-mail window or starting a chat function, and Hpresentation-related actions, such as sorting a list of search results.
    29. Providing printable document versions: If a document is either too long, dispersed over several pages or in a specific layout that is not suitable for online reading, a printer-friendly version of the document should be provided that prints the content in a form acceptable to the user (e.g. in the expected layout, paper format, or orientation).
    30. Use of “white space”: “White space” on a page i.e. space filled only with the background color should be used in such a way that it does not impair the visual skimming of the page. While white space is an important means of visually organizing the different content elements on a page, if the distance between the blocks of information displayed becomes too large, rapid skimming of the page can be impeded.
    31. Selecting appropriate page lengths The length of a page should be selected so as to support the primary purpose and use of the page. Short pages are generally more appropriate for homepages, navigation pages, or overview pages that need to be read quickly. Longer pages can be more appropriate when users want to read the content without interruptions or when the page needs to match a paper counterpart.
    32. Using colour: Colour should be used with care, taking into account human capabilities and restrictions in perceiving colour, and not as the only means of conveying information. Color should never be the only means of coding. Some users may have difficulties in perceiving certain colors or color combinations (color-blindness).
    33. Using frames with care: If frames are used, care should be taken to avoid possible problems, for example, those involving the use of the back button, bookmarking of pages, or scrolling of information. When frames are used, it is important to title each frame, and to describe its purpose and how frames relate to one another other.
    34. Providing alternatives to frame-based presentation: If frames are used, an alternative way of presenting relevant information without frames should be provided. Providing alternative text-only pages: When style sheets and/or frames are turned off it should be possible for the user to read and understand the page; alternatively, the user should be provided with an equivalent alternative text-only page.
    35. Consistent page layout: Pages should be designed using consistent layout schemes, supporting the user in finding similar information at the same position on different pages. Overall layout schemes apply to all pages and are preferable when all pages have a similar structure. Frequently, however, different pages have different purposes and types of content. In such cases, pages can usually be grouped in different categories, using one layout scheme for each category consistently.
  36. Placing title information consistently: Page titles should be placed in a consistent location on the different pages.
    37. Observing principles of human perception When designing application pages, the general principles of human perception should be taken into account. The International Standards mentioned below shall be consulted for guidance. Practical guidelines for presenting information to the user are to be found in ISO 9241-12. Guidance on selecting and using different forms of interaction techniques is to be found in ISO 9241-14 to ISO 9241-17. ISO 9241-14 gives guidance about menus, ISO 9241-15 about command dialogues, ISO 9241-16 about direct manipulation and ISO 9241-17 about forms. In addition, when designing multimedia information presentations, the design principles and recommendations described in ISO 14915-1 to ISO 14915-3 should be taken into account. Appropriate content presentation also plays a key role in accessibility.
    38. Linking back to the home page or landmark pages: Each page should contain a link leading to the home page of the application or to a landmark page that is easy to recognize for the user.
  39. Providing a site map: A separate navigation overview such as a site map should be provided for application showing the structure of the site in an overview form.
    40. Consistency between navigation components and content: If navigation components (or overviews) are shown in conjunction with associated content, consistency between the navigation component and the content shown should be maintained by indicating in the navigation component (e.g. highlighting) the topic currently visible in the content area.
  41. Placing navigation components consistently: Navigation components should be placed consistently on the pages or in the framesets in the pages of the application.
    42. Individualization and user adaptation : Adapting the content and the navigation of a user interface to individual users or user groups can be a useful mechanism for providing information that is of interest to the users and for making access to relevant information more efficient. User adaptation can also be important for making the user interface more accessible. Different approaches can be used for achieving these goals, like providing users with means for customizing the user interface to their personal needs i.e. individualization designing content and navigation differently for varying user groups or roles i.e. such as employees of different levels, citizens etc, monitoring the user’s behaviour and adapting to the user’s goals that are inferred from the behaviour observed, recommending information that is potentially more relevant or interesting to the specific user, based on the behaviour of all users or a user group.
    43. Taking account of the users’ tasks and information needs: When providing different access paths or navigation structures for different user groups, the tasks and information needs of these user groups should be taken into consideration.
  44. Making individualization and adaptation evident: It should be made evident to the user when individualization and/or adaptation are used.
    45. Making user profiles evident: If predefined user profiles or user-specified profiles are used for individualizing or adapting content, the profile currently used should be made evident. If profiles are used, it is important to provide users with information about this concept and its implications.
  46. Allowing users to see and change profiles: If user-specified profiles are used, users should be able to see, modify and delete that profile on demand.
  47. The user interfaces of the system should follow the guidelines specified under www.usability.gov
   System Availability
     1. The System must be available to users:
• from <xx:00> to <xx:00>;
• on <all weekdays/xxx days per year>.
  2. The planned downtime for the System must not exceed <xx> hours per <rolling three month period>. The System is considered to be down if any user is unable to perform any normal System function and if this failure is attributed to any component of the System other than the workstation.
  3. Unplanned downtime for the System must not exceed <xx hours/minutes> per <rolling three month period>.
  4. The number of incidents of unplanned downtime for the System must not exceed <x> per <rolling three month period>.
  5. In the event of any software or hardware failure, it must be possible to restore the System (with inline synchronization) within no more than <xx> hours.
   Performance and Scalability
   1. The System must provide adequate response times for commonly performed functions under both standard and peak conditions
    2. The System must be able to perform a simple search within 5-8 seconds and a advanced search (multiple search criteria) within 10-15 seconds regardless of the storage capacity or number of cases in the system. In this context, performing a search means returning a result list. It does not include retrieving the records themselves.
    3. The System must be able to retrieve and display within 5-8 seconds the case which has been accessed within the previous 2 months, regardless of storage capacity or number of cases in the system. This requirement is intended to allow for rapid retrieval of frequently-used cases, on the understanding that frequency of use is typically correlated with recent use.
    4. The System must be able to retrieve and display within 20 seconds the case which has not been accessed within the previous 2 months, regardless of storage capacity or number of cases in the system. This requirement is intended to allow for cases where cases used infrequently are stored on slower media than more active records.
  5. The System be scaleable and must not have any features which would preclude use in small or large police stations, with varying numbers of cases handled.

    5. FUNCTIONAL ARCHITECTURE RECOMMENDATIONS
The proposed functional architecture is modeled around centralized deployment to facilitate ease of maintenance and leverage advancement in open standards and web technologies.
The 3 C’s (Core-Configuration-Customization) forms the guiding principle for the architecture. The functional architecture of the CCTNS solution is given in the figure below. The functional architecture is composed of 4 major components based on SOA principles. Each of the components contains multiple services as defined by Service Definition. The core services, support layer and security and access control components can be deployed as standard components with necessary configuration changes. The customization layer can override and add to the core services based on the specific state requirements and can be plugged with the core services.
 CCTNS Functional Architecture Overview
   The deployment of the application will be at state level and will be configured and customized as per the state specific extensions.
The systems should be designed with the following broad guidelines:
 System Functionality
     1) The system should support multilingual interface
    2) The system should be designed in manner that operational data is not lost in case of any failure of equipment or communication network.
   3) The system should work even in an offline mode with the critical functionality
    4) The system should be designed to have satisfactory performance even in Police Stations connected on low-bandwidth
    5) The system should be implemented using Service Oriented Architecture (SOA) and have a modular design
   6) The system should be developed on Open Standards
    7) The system should be built on a common User Access and Authentication Service to ensure Single-Sign on for the end-user
   8) The system should be developed for a centralized deployment and maintenance
   9) The system should be developed to be deployed in a 3-tier datacenter architecture
    10) The system should be designed to have a n-tier architecture with the presentation logic separated from the business logic that is again separated from the data-access logic
    11) The system should be extensible to provide access to the interfaces through PDA’s and mobile data terminals
   12) The system should adopt standardized formats and common metadata elements
    13) The system should be designed for access through browser-based systems and must impose minimal requirements on the client device
   14) The system must support multiple types of communication services for remote access
    15) The system should have capability to support public access to a subset of data and functionality
  16) The system should support multi-tier authentication where required

    17) The system should support SSL encrypted connections
   18) The system should support secure virtual private network connections
    19) The system should use HTTPS as the communication protocol, i.e., HTTP over an encrypted secure socket layer (SSL)
   20) The system should run on multiple browsers
   21) The system should support selective encryption of the stored data
    22) The system should ensure secure transmission of data over the network and utilize SSL and 2-way digital signatures
    23) The system should ensure high standards of security and access control through:
a) Prevent cross-site scripting
b) Validate the incoming data / user request
c) Encode the incoming data / user request
d) Prevent SQL Injection
e) Utilize parameterized queries
f) Sanitizetheuser-inputs
g) Validate the data both at the client and server
h) Do not allow hard delete and perform only soft tagging the row for deletion
    24) The system should ensure high scalability and performance through:
a) Use of cache for storing frequent data
b) Use of AJAX based technology to improve user experience. Aggressive page loading to be considered based on the screen and estimate usage pattern
c) Leverage Asynchronous HTTP socket capabilities of web server for scalability and performance
d) Host all the static content (documents, images) on the web server
e) The search results should be fetched from the database in batches of 10 or 20 maximum
as configured within the application
f) Displayofrecordsonthescreeninbatches/pagedmanner
g) The search should fetch only the fields that need to be displayed to the user. Only when
the user clicks on a particular record to view its further details should a query be fired to
fetch the additional details for this particular record only
h) A hierarchical cache should be configured and used for caching of results of most frequently used searches
i) Database Indexes should be applied on the key columns used for searching

1. Introduction 
1.1 Purpose
This is the Software Requirements Specification for GAMMA-J’s Web Store. This Web Store is designed to allow new online store owners a quick and easy means to setup and perform sales and other core business over the internet. This document will outline all of the functions, capabilities and requirements for Version 1 of GAMMA-J’s Web Store. Version 1 is planned for implementation on a “plug and play” USB Key. Future versions will be based on other network appliances.
1.2 Document Conventions
None
1.3 Intended Audience, Reading Suggestions
This document is intended to flush out the requirements by the customer GAMMA-J. The customer can review this document to ensure their needs along with the needs of their user’s are being met in their new Web Store program. The development team will also use this document for guidance on overall design and implementation of the Web Store system. The test and verification team can reference this to ensure the requirements are being meet for the customer. Finally, the tech writer will use this to assist with user documentation. This document is designed to be review from beginning to end; however, readers who are new to technical documentation may want to refer to Appendix E: Data Dictionary first.
1.4 Project Scope
According to GAMMA-J’s Functional Needs Statement this Web Store will:
 Manage customer accounts
 Manage an online store inventory
 Manage a customer’s “Shopping Cart”
 Confirm Orders
 Have an unambiguous interface to assist in browsing the categories and products
 Use Secure Socket Layer (SSL) for security
 Have an availability of 99.999%
 Allow an optional mirror site for reliability and backups
 Feature interface for future software enhancement via “Plug-ins”
The initial inventory will be 100 items. Expandable with unique codes, the owners can purchase to expand the inventory. The minimum total inventory will be 20,000 items. Since this will be a “Plug and Play device”, no software installation will be necessary. This software will contain all of the basic needs to manage an online store. Advanced needs can be added in the future via “plug-ins.” More detail on the functionality of the Web Store can be found in part 3. System Features and in the function Needs statement.
1.5 References
  
This document draws insight from the Web Store System Overview, Functional Needs Statement, and Stakeholder Goals List.


2. Overall Description 2.1 Product Perspective
Web Store is a new system designed for users new to the online E-commerce. This will be a plug and play device with its own CPU and operating system. The Web Store will be a quick and easy means to setup and operate an online Web Store. The Figure 2.1 is a context diagram showing external system interfaces.
2.2 Product Features
Account Management (AM) (High Priority): AM allows users to create, edit, and view accounts information. It also allows the user to login/out of the system.
Search Engine (SE) (Medium Priority): SE is the tool that assists the user in finding a specific item in the database. It can receive search criteria, find search criteria, and return the results of the search.
Product Management (PM) (High Priority): PM allows sales personnel to manage the product line shown on the web site.  
Shopping Cart (SC) (Medium Priority): SC is temporary storage for customers shopping on the web. Items from the inventory can be reserved in a virtual cart until the customer decides to purchase them.
Purchasing and Payment (PP) (High Priority): PP is used to approve and transfer payment from buyers when purchasing items in the cart.
2.3 User Classes
System Administrator: Is generally the owner that takes care of maintenance for the Web Store system. The administrator will be in charge of assigning privileges of accounts. Suggested more than one individual can have administrator privilege to ensure advisability. Full documentation will be provided to the Administrator to assist with this process.
Sales Personnel: Is generally the owner of the Web Store tasked with updating inventory and product line descriptions. Once added, sales personnel can add, delete and change descriptions, pictures, prices, and when ready flag items for customers to buy.
Customer: A customer is an individual wishing to purchase inventory from GAMMA-J’s Web Store. The Web store will have a variety of clientele depending upon the inventory loaded on the Key. When creating a new account on Web Store it will default as a customer account. Later if the account needs to be upgraded the administrator can accomplish this via the administrator interface.
2.4 Operating Environment
OE-1: Web Store shall operate with the following internet browsers: Microsoft Internet Explorer version 6 and 7, Netscape Communicator Version 4 and 5.
OE-2: Web Store shall operate on an Intel based system with Slackware Linux 2.6 and Apache Web Server. The operating system is designed by the Yoggie Corporation. Although maintenance documentation will be supplied and the operating system will be tested, the developers of this Web Store are not responsible for the functionality of the operating system.
OE-3: The system shall use SQL based database to store inventory information. OE-4: USB interface and divers are provided by Yoggie Corporation.
2.5 Design and Implementation Constraints
CO-1: Must use a SQL based database. SQL standard is the most widely used database format. Restricting to SQL allows easy of use and compatibility for Web Store.
CO-2: Compatibility is only tested and verified for Microsoft Internet Explorer version 6 and 7, Netscape Communicator Version 4 and 5. Other versions may not be 100% compatible. Also other browsers such as Mozilla or Firefox may not be 100% compatible.
2.6 User Documentation
UD-1: Shall install online help for users via the web interface
UD-2: Shall deliver Operations and Maintenance manual, Users Guide book, and Installation Instructions for the Administrator.
2.7 Assumptions and Dependencies  
AD-1: Assume the delivery of development, test and evaluate samples of the USB system from Yoggie.
AD-2: Assume Yoggie will freeze the baseline of the USB system after delivery.

3. System Features
3.1 Customer Accounts
3.1.1 Description And Priority
Customers will be able to create accounts to store their profiles, contact information, purchase history, and confirm orders. This is a high priority system feature. Security methods will ensure that customer accounts remain confidential and resistant to tampering.
3.1.2 Stimulus/Response Sequences
 Web Browser initiates request to Web Server via HTTPS
 Web Server parses request
 Web Server submits request to Service
 Service picks up request
 Service runs task
 Service returns results
 Web Server checks for completion
 Web Server returns results to Web Browser
 Web Browser displays results
3.1.3 Functional Requirements
Customers will be able to create accounts to store their customer profiles, configure contact information, view their purchase history, and confirm orders. Customers will be able to register, log in, and log out of their accounts. Furthermore, Customer profiles will also include payment information, such as the ability to store credit card information, and address information.
3.2 Inventory Management
3.2.1 Description And Priority
Inventory management will allow for the placement of products into multi-tiered categories. This is a medium priority system feature.
3.2.2 Stimulus/Response Sequences
Same as 3.1.2
3.2.3 Functional Requirements
Products will be stored in multi-tiered categories; a category can contain sub categories or products. The inventory management will allow for administrators to update the categories, the products placed in categories, and the specific product details.
3.3 Shopping Cart
3.3.1 Description And Priority
Customers will be able to add and store products for purchase within the shopping cart. This feature is a medium priority system feature.  
3.3.2 Stimulus/Response Sequences
Same as 3.1.2
3.3.3 Functional Requirements
Customers will also be able to add products into the shopping cart. The shopping cart will clearly display the number of items in the cart, along with the total cost. The customer will also be able to add to or remove products from the shopping cart prior to checkout and order confirmation.
3.4 Order Confirmation
3.4.1 Description And Priority
Order confirmation will allow the customer to review their order after checkout prior to confirmation. This is a medium priority system feature.
3.4.2 Stimulus/Response Sequences
Same as 3.1.2
3.4.3 Functional Requirements
Customers will be able to confirm the order after checkout. If the order is incorrect, the customer will be able to revise and update their order. The customer will then receive a confirmation email with the specific order details.
3.5 Interface
3.5.1 Description And Priority
The interface will be presented to the customer in a web browser. The interface must remain consistent among various web browsers and be intuitive to the customer. This is a medium priority system feature.
3.5.2 Stimulus/Response Sequences
Same as 3.1.2
3.5.3 Functional Requirements
Customers will be presented with an unambiguous interface to assist in browsing the categories and products. Customers will be able to search for products matching their search criteria. The interface will be compatible with all major web browsers such as Internet Explorer, Mozilla Navigator, Mozilla Firefox, Opera, and Safari.
3.6 Plug-in API
3.6.1 Description And Priority
The system will feature an API to allow customers to build custom plug-ins to be able to meet their needs. This is a high priority system feature as it ensures the flexibility of the system to be tailored to specific needs.
3.6.2 Stimulus/Response Sequences
 Web Browser initiates request to Web Server via HTTPS
 Web Server parses request
 Web Server submits request to API Service
 API Service picks up request
 API Service submits request to Plug-in
 Plug-in picks up request
 Plug-in runs tasks 
 Plug-in returns results
 API Service validates results
 API Service returns results
 Web Server checks for completion
 Web Server returns results to Web Browser
 Web Browser displays results
3.6.3 Functional Requirements
The system will implement an Application Interface to allow for various plug-ins to interact with the system. The plug-in API will be well documented and specifications will be provided to plug-in developers.
4. External Interface Requirements 4.1 User Interfaces
Login Screen
 
Manage products (System Admin)

Add screen (System Admin)
Delete screen (System Admin)
Update screen (System Admin)
Customer screen
Shopping cart screen (customer)
Login Screen for Customer
Order Summary (customer)

AUTOMECHANICS DOOR LOCKS HAND TOOLS POWER TOOLS COMPRESSORS MY ACCOUNT ORDER STATUS HELP
 1. Shopping Cart >>>
 2. Payment and Order Summary >>>
 3. Order Confirmation>>>
 No of Items : 1
 Picture Description Unit Price Quantity Shipping Price Total
 Picture 1
  This item has all the features
 $ 34.00
 1
 $ 5.99
 $39.99
Account Details
Shipping address:
Credit Card No.:
Name on Credit Card: Credit Card Expiry date:
1234 Main Street Tustin, CA - 92782
XXXX XXXX XXXX 1234 John Doe
02/99
   Confirm Order
Confirmation of Order
Check Order Status of Order
Maintain System Administration
Hardware Interfaces
HI-1: USB key from Yoggie
Software Interfaces
SI-1: WebOrder Browser Interface
SI-1.1: The order database of WebOrder will communicate with the account system through a programmatic interface for the billing operations.
SI-1.2: Through programmatic interface, WebOrder will transmit information of items ordered by customers to the Inventory management system.
SI-1.3: Plug-ins interface
4.4 Communications Interfaces
CI-1: The WebOrder system shall send an e-mail confirmation to the customer that the items they ordered will be delivered to the shipping address along with tracking number.
CI-2: The WebOrder system shall send an e-mail to System Administrator regarding any technical queries from customers or sales people.

5. Quality Attribute Requirements 5.1 Performance Requirements
 Upon the USB being plugged in the system shall be able to be deployed and operational in less than 1 minute.
 The system shall be able to handle 1000 customers logged in concurrently at the same time.
 The system shall be able to retrieve 200 products per second.
 The system shall be able to add product to shopping cart in less than 2ms.
 The system shall be able to search for a specified product in less than 1 second.
 The system shall be able to email customer and vendor in less than 1 second.
 The system shall be able to validate credit card in less than 2 seconds.
 The system shall be able to acquire shipping charges in less than 2 seconds.
 The system shall be able to restore 1000 records per second.
5.2 Safety Requirements
 The system will do periodic backups through a live internet connection. 5.3 Security Requirements
 The system shall validate credit cards against fraud.
 The system shall encrypt all sensitive information via https.
 The system shall encrypt all customer data in database.
 The system shall auto detect IP DOS attacks and block IP automatically.
 The system shall detect consecutive failed login attempts.
 The system shall be protected by open source firewall called Firestarter. http://www.fs-security.com/
5.4 Availability Requirements
 The system shall have an availability of 99.99%. 5.5 Efficiency Requirements
 The system shall perform searches via Dijkstra's shortest path algorithm.
 For returning customers, the system shall validate 'existing' credit card in system
after each log in.
 The system shall automatically compress image files that are too large in size.
 The system will employ on demand asynchronous loading for faster execution of pages.
 The system shall validate email address existence. 5.6 Usability Requirements
 The system shall be easy to use
 The system shall be easy to learn
 The system shall utilize help bubbles to assist managers, customers, and administrators
 The system shall employ easy to locate buttons
 The system shall prompt customer with friend easy to read error messages.
 The system shall utilize consistent symbols and colors for clear notifications.
5.7 Maintainability Requirements
 The system shall utilize interchangeable plugins.
 The system shall be easily updatable for fixes and patches.
 The system shall create logs of all changes, updates, or fixes that are done to the site.
 The system shall be easy to upgrade. 5.8 Portability Requirements
 The system shall be extremely portable via the usb drive.
 The system shall be easy to migrate or backed up via another usb drive.
5.9 Testability Requirements
 The system should be able to run under debug mode.
 The system should be able to run test credit card transactions.
 The system should be able to run test shipping orders.
 The system should be able to create test environment of weborder system.
6. Other Requirements
 The system hardware shall be fixed and patched via an internet connection.
 Yoggie shall coordinate on future enhancement and features with our
organization.
 The system shall adhere to the following hardware requirements:
 4GB Flash ram chip
 128MB SDRAM
 Intel XScale PXA270 520-MHz chipset
 OS: Apache web server
 Database: MySQL


Appendix A: Glossary
Plug and play: Plug and play is a computer feature that allows the addition of a new device, normally a peripheral, without requiring reconfiguration or manual installation of device drivers.
SDRAM: Short for Synchronous DRAM, a type of DRAM that can run at much higher clock speeds than conventional memory. SDRAM actually synchronizes itself with the CPU's bus and is capable of running at 133 MHz, about three times faster than conventional FPM RAM, and about twice as fast EDO DRAM and BEDO DRAM. SDRAM is replacing EDO DRAM in many newer computers.
Actor: A person playing a specific role, a software system, or a hardware device that interacts with a system to achieve a useful goal.
Alternative course: A path through a use case that leads to success, but involves a variation from the normal course in the specifics of the task or of the actor’s interaction with the system.
Assumption: A statement that is believed to be true in the absence of proof or definitive knowledge.
Business requirement: A high- level business objective of the organization that builds a product or of a customer who procures it.
Business rule: A policy, guideline, standard, or regulation that defines or constrains some aspect of the business.
Cluster Server: Servers work together as one machine to provide increase availability of applications.
Constraint: A restriction that is imposed on the choices available to the developer for the design and construction of a product.
Context diagram: An analysis model that depicts a system at a high level of abstraction.
Customer: A project stakeholder, who requests, pays for, selects, specifies, uses, or receives the output generated by a product.
Data Dictionary: A collection of definitions for the data elements, structures, and attributes those are important to the problem domain.
Data flow diagram: An analysis model that depicts the processes, data collections, terminators, and flows among them that characterize the behavior of a business process or of a software system.
Documentation Writers: Writers are able to take technical complexities and turn them into simple, understandable text. They will expertly produce the documentation products needed such as user manuals, Installation guides.
Developers: One who programs computers or designs the system to match the requirements of a system analyst.
Feature: A set of logically related functional requirements that provides a capability to the user and enables the satisfaction of a business objective.
Flowchart: A model that shows the processing steps and decision points in the logic of a process or of a program, similar to that of an activity diagram.
Functional requirements: A statement of a piece of required functionality or a behavior that a system will exhibit under specific conditions.
IEEE: The Institute of Electrical and Electronics Engineers.
Nonfunctional requirements: A description of a property or characteristic that the system should exhibit.
Out of stock: Entire order will be delayed until all of the ordered items are in stock.
Post condition: A condition that describes the state of the system after a use case is successfully completed.
Pre condition: A condition that must be satisfied or a state the system must be in before a use case may begin.
Process: A sequence of activities performed for a given purpose. A process description is a documented definition of those activities.
Project Manager: A project manager is a professional in the field of project management. They have the responsibility of planning and execution of any project.
Quality attribute: A kind of nonfunctional requirement that describe a quality or property of a system.
RAID: In computing, Redundant Array of Independent Drives is an umbrella term for computer data storage schemes that divide and / or replicate data among multiple hard drives.
Requirement: A statement of a customer need or objective or of a condition or capability that a product must possess to satisfy such a need or objective.
Scenario: A description of a specific interaction between a user and a system to accomplish some goal. An instance of usage of the system.
Secure Socket Layer: A protocol developed for the browsers for transmitting private documents via the internet.
Software requirement specification (SRS): A collection of functional and non functional requirements for software product.
Customer Use Cases Register Customer


Appendix B: Use Cases
Goal:
Register a new customer account with the system.
Actors:
Customer Weborder System
Preconditions:
Customer must be able to access the web order system via a web browser with HTTPS.
Triggers:
Customer clicks button or link to "Register"
Basic Scenario:
1. Customer first clicks on the button or link to initiate registration process.
2. System prompts the customer to fill out his/her first name, last name, billing address, shipping address, email address, and their password.
3. Customer enters fields.
4. System validates the customer's information.
5. System creates a new account for the Customer.
6. System creates a session cookie.
7. System displays an account home page to Customer.
Alternative Scenario:
A1. System recognizes Customer's cookie. A2. Go to Step 7 (Basic Scenario).
Postconditions:
The Customer registers and creates a new customer account with the system.

Login Customer
Goal:
Login to a customer account with the system.
Actors:
Customer Weborder System
Preconditions:
Customer account must already be registered.
Triggers:
Customer clicks button or link to "Login"
Basic Scenario:
1. Customer clicks on the button or link to initiate the login process. 2. System prompts the customer for his/her email and password.
3. System verifies the information.
4. System creates session cookie.
5. System displays account home page to the Customer
Alternative Scenario:
A1. System recognizes the Customer's cookie
A2. Go to Step 5 (Basic Scenario).
B1. Customer enters incorrect login information.
B2. System prompts the Customer to resend login details to the email account. B3. Customer confirms.
B4. System sends an email to the registered email address.
B5. Go to Step 1 (Basic Scenario).
Postconditions:
The Customer is logged into the system.

Edit Customer Details
Goal:
Edit the customer account details.
Actors:
Customer Weborder System
Preconditions:
Customer must be logged-in on the system.
Triggers:
Customer clicks on the button or link to "Edit Account"
Basic Scenario:
1. Customer clicks the button or link to initiate the process to edit the account. 2. System displays the account home page to the Customer.
3. Customer clicks the button or link in order to edit the account details.
4. System verifies the changes.
5. System stores new account information.
Alternative Scenario: None
Postcoditions:
The Customer has changed the account details.

Logout Customer
Goal:
Logout the customer account on the system.
Actors:
Customer Weborder System
Preconditions:
Customer must be logged-in on the system.
Triggers:
Customer clicks on the button or link to "Logout"
Basic Scenario:
1. Customer clicks the button or link in order to initiate logout process. 2. System terminates the session cookie.
3. System displays the home page.
Alternative Scenario: None
Postconditions:
The Customer is logged out of the system.

Add Item To Cart
Goal:
Customer adds item(s) in the cart
Actors: Customer System
Preconditions:
The customer must be logged-in on the system. Triggers:
Customer clicks the button or link to "Add To Cart".
Basic Scenario:
1. Customer clicks the button or link in order to add to the cart with specified quantity. 2. System adds the item(s) to the cart.
3. System prompts the Customer to edit the quantity or remove the item from cart.
4. Customer confirms the items in the cart.
5. System stores cookie with cart details.
6. Customer returns to product listings.
Alternative Scenario:
A1. Customer terminates the web browser window after adding item(s) to cart.
A2. Customer returns to weborder interface.
A3. System recognizes cookie and goes to step 6 (Basic Scenario) with existing items in cart.
Postconditions:
The Customer has added item(s) to the shopping cart.

Checkout An Order
Goal:
Customer places and confirms an order for the checkout process.
Actors:
Customer Weborder System
Preconditions:
1. Customer must be logged-in on the system.
2. Customer must have item(s) in the shopping cart.
Triggers:
Customer clicks button or link to "Ckeckout"
Basic Scenario:
1. Customer clicks the button or link to initiate the checkout process.
2. System calculates order of items in the shopping cart.
3. System appends cookie with flag for checkout process.
4. System presents the customer with the account details and payment methods. 5. Customer confirms account details and payment methods.
6. Customer confirms order.
7. System stores order confirmation and order details.
8. System sends email confirmation to the Customer.
9. System appends cookie with flag for completed checkout process.
Alternative Scenario:
A1. Customer terminates order web browser during order the checkout process. A2. Customer returns to weborder interface.
A3. System recognizes cookie and goes to step 4 (Basic Scenario).
Postconditions:
The Customer has placed and confirmed an order.

Administrator Use Cases Login Administrator
Goal:
Login to an Administrator account with the system.
Actors: Administrator Weborder System
Preconditions:
Administrator account must already be registered.
Triggers:
Administrator clicks button or link to "Login"
Basic Scenario:
1. Administrator clicks button or link to initiate login process. 2. System prompts the Administrator for email and password. 3. System verifies information.
4. System creates session cookie.
5. System displays account home page to Administrator
Alternative Scenario:
A1. System recognizes Administrator 's cookie
A2. Go to Step 5 (Basic Scenario).
B1. Administrator enters incorrect login information.
B2. System prompts Administrator to resend login details to email account. B3. Administrator confirms.
B4. System sends email to registered email address.
B5. Go to Step 1 (Basic Scenario).
Postconditions:
The Administrator is logged into the system.

Logout Administrator
Goal:
Logout the Administrator account on the system.
Actors: Administrator Weborder System
Preconditions:
Administrator must be logged-in on the system.
Triggers:
Administrator clicks button or link to "Logout"
Basic Scenario:
1. Administrator clicks button or link to initiate logout process. 2. System terminates the session cookie.
3. System displays home page.
Alternative Scenario: None
Postconditions:
The Administrator is logged out of the system.

Add User
Goal:
Register a new customer, sales person, or administrator account with the system.
Actors:
Administrator Weborder System
Preconditions:
Administrator must be able to access the weborder system via a web browser with HTTPS.
Triggers:
Administrator clicks button or link to "Add Users"
Basic Scenario:
1. Administrator clicks the button or link to initiate Add user process.
2. System prompts the Administrator to fill out first name, last name, username, email address, password, and privileges of the user.
3. System validates new user information.
4. System creates a new account for the new user with desired privileges.
5. System displays account home page to Administrator.
Postconditions:
A new customer account is created within the system.

Remove User
Goal:
Remove a user from the system.
Actors: Administrator Weborder System
Preconditions:
Administrator must be able to access the weborder system via a web browser with HTTPS.
Triggers:
Administrator clicks button or link to “Remove User"
Basic Scenario:
1. Administrator clicks button or link to initiate the remove user process.
2. System prompts the Administrator to select a user by searching or viewing a list of users. 3. System displays user information.
4. System confirms deletion of selected user.
5. System displays account home page to Administrator.
Postconditions:
An account has been deleted within the system.

Change User Properties
Goal:
Alter properties such as passwords and privileges of the user.
Actors: Administrator
Weborder System
Preconditions:
Administrator must be able to access the weborder system via a web browser with HTTPS.
Triggers:
Administrator clicks button or link to “Change User Properties"
Basic Scenario:
1. Administrator clicks the button or link to initiate change user properties process.
2. System prompts the Administrator to select a user by searching or viewing a list of users. 3. System displays the user information.
4. System alters the user properties.
5. System displays the account home page to Administrator.
Postconditions:
An account has been altered within the system.

Install Plug-ins
Goal:
Install a new plug-in to the application.
Actors: Administrator Weborder System
Preconditions:
Administrator must be able to access the weborder system via a web browser with HTTPS.
Triggers:
Administrator clicks the button or link to "Install Plug-ins "
Basic Scenario:
1. Administrator clicks the button or link to initiate Plug-in installation process. 2. System prompts the Administrator to upload the Plug-in module.
3. System installs plug-in and validates changes.
4. System displays plug-in options to the Administrator.
Postconditions:
A new plug-in is installed in the application.

Remove Plug-ins
Goal:
Remove a plug-in from the application.
Actors: Administrator Weborder System
Preconditions:
Administrator must be able to access the weborder system via a web browser with HTTPS.
Triggers:
Administrator clicks the button or link to "Install Plug-ins "
Basic Scenario:
1. Administrator clicks the button or link to initiate Plug-in deletion process. 2. System prompts the Administrator to select the desired Plug-in module. 3. System removes the plug-in and validates changes.
Postconditions:
A plug-in is removed from the application.
Manage Plug-in Options
Goal:
Make changes to an installed plug-in.
Actors: Administrator Weborder System
Preconditions:
Administrator must be able to access the weborder system via a web browser with HTTPS.
Triggers:
Administrator clicks button or link to "Manage Plug-ins "
Basic Scenario:
1. Administrator clicks the button or link to initiate Plug-in Options process. 2. System prompts the Administrator to select the desired Plug-in module. 3. System displays all plug-in options to the Administrator.
4. System confirms changes with the Administrator.
Postconditions:
A plug-in’s options have successfully been changed.

Install patch process
Goal:
Install patches or software updates to the web store.
Actors: Administrator Weborder System
Preconditions:
Administrator must be able to access the weborder system via a web browser with HTTPS.
Triggers:
Administrator clicks the button or link to "Install Patch"
Basic Scenario:
1. Administrator clicks the button or link to initiate Patching process. 2. System prompts the Administrator to upload the patch.
3. System automatically installs patches and reinitializes software. 4. System confirms that patch has been successfully installed.
Postconditions:
The web store was successfully updated.

Sales Person Use Cases Login Sales Person
Goal:
Login to an account with the system.
Actors:
Sales Person Weborder System
Preconditions:
Sales Person account must already be registered.
Triggers:
Sales Person clicks button or link to "Login"
Basic Scenario:
1. Sales Person clicks the button or link to initiate login process. 2. System prompts the Sales Person for email and password.
3. System verifies the information.
4. System creates session cookie.
5. System displays the account home page to Sales Person
Alternative Scenario:
A1. System recognizes Sales Person's cookie
A2. Go to Step 5 (Basic Scenario).
B1. Sales Person enters incorrect login information.
B2. System prompts the Sales Person to resend login details to email account. B3. Sales Person confirms.
B4. System sends email to registered email address.
B5. Go to Step 1 (Basic Scenario).
Postconditions:
The Sales Person is logged into the system.

Logout Sales Person
Goal:
Logout the Sales Person account on the system.
Actors:
Sales Person Weborder System
Preconditions:
Sales Person must be logged-in on the system.
Triggers:
Sales Person clicks the button or link to "Logout"
Basic Scenario:
1. Sales Person clicks the button or link to initiate logout process. 2. System terminates the session cookie.
3. System displays home page.
Alternative Scenario: None
Postconditions:
The Sales Person is logged out of the system.

Add Product
Goal:
Add a product to the system.
Actors:
Sales Person Weborder System
Preconditions:
Sales Person must be able to access the weborder system via a web browser with HTTPS.
Triggers:
Sales Person clicks the button or link to "Add Product"
Basic Scenario:
1. Sales Person clicks the button or link to initiate Add Product process.
2. System prompts the Sales Person to fill out product name, product id, product description, product price, upload a product image, number of items in inventory, and availability of product.
3. System validates the new product information.
4. System creates a new product page for the new product.
5. System displays the newly created product page.
Postconditions:
A new product is created within the system.

Remove Product
Goal:
Remove a product from the system.
Actors:
Sales Person Weborder System
Preconditions:
Sales Person must be able to access the weborder system via a web browser with HTTPS.
Triggers:
Sales Person clicks the button or link to "Remove Product"
Basic Scenario:
1. Sales Person clicks the button or link to initiate Remove Product process.
2. System prompts the Sales Person to select a product by searching or viewing a list of products.
3. System validates the product information.
4. System removes the product page and product information from the system.
5. System displays the newly created product page.
Postconditions:
A product is deleted from the system.

Update Product Attributes
Goal:
Update Product attributes within the system.
Actors:
Sales Person Weborder System
Preconditions:
Sales Person must be able to access the weborder system via a web browser with HTTPS.
Triggers:
Sales Person clicks the button or link to "Update Product Attributes"
Basic Scenario:
1. Sales Person clicks the button or link to initiate Update Product Attributes process.
2. System prompts the Sales Person to select a product by searching or viewing a list of products.
3. System displays all of the product attributes and allows Sales Person to update the product name, product id, product description, product price, update the product image, product availability, and/or the number of items in the inventory.
4. System validates the product information.
5. System updates the product page and product information within the system.
6. System displays the newly updated product page.
Postconditions:
The product attributes have been changed.

Register Customer
Goal:
Register a new customer account with the system.
Actors:
Customer Weborder System
Preconditions:
Customer must be able to access the weborder system via a web browser with HTTPS.
Triggers:
Customer clicks the button or link to "Register"
Basic Scenario:
1. Customer clicks the button or link to initiate registration process.
2. System prompts the customer to fill out first name, last name, billing address, shipping address, email address, and password.
3. Customer enters fields.
4. System validates customer's information.
5. System creates a new account for the Customer.
6. System creates session cookie.
7. System displays account home page to Customer.
Alternative Scenario:
A1. System recognizes Customer's cookie. A2. Go to Step 7 (Basic Scenario).
Postconditions:
The Customer registers and creates a new customer account with the system.

Login Customer
Goal:
Login to a customer account with the system.
Actors:
Customer Weborder System
Preconditions:
Customer account must already be registered.
Triggers:
Customer clicks the button or link to "Login"
Basic Scenario:
1. Customer clicks the button or link to initiate login process.
2. System prompts the customer for email and password. 3. System verifies the information.
4. System creates session cookie.
5. System displays account home page to Customer
Alternative Scenario:
A1. System recognizes Customer's cookie
A2. Go to Step 5 (Basic Scenario).
B1. Customer enters incorrect login information.
B2. System prompts Customer to resend login details to email account. B3. Customer confirms.
B4. System sends email to registered email address.
B5. Go to Step 1 (Basic Scenario).
Postconditions:
The Customer is logged into the system.

Edit Customer Details
Goal:
Edit the customer account details.
Actors:
Customer Weborder System
Preconditions:
Customer must be logged-in on the system.
Triggers:
Customer clicks button or link to "Edit Account"
Basic Scenario:
1. Customer clicks button or link to initiate the process to edit the account. 2. System displays account home page to Customer.
3. Customer clicks button or link to edit the account details.
4. System verifies the changes.
5. System stores new account information.
Alternative Scenario: None
Postcoditions:
The Customer has changed the account details.

Logout Customer
Goal:
Logout the customer account on the system.
Actors: Customer
Weborder System
Preconditions:
Customer must be logged-in on the system.
Triggers:
Customer clicks button or link to "Logout"
Basic Scenario:
1. Customer clicks button or link to initiate logout process. 2. System terminates the session cookie.
3. System displays home page.
Alternative Scenario: None
Postconditions:
The Customer is logged out of the system.

Add Item To Cart
Goal:
Customer adds item(s) in the cart
Actors: Customer System
Preconditions:
The customer must be logged-in on the system. Triggers:
Customer clicks button or link to "Add To Cart".
Basic Scenario:
1. Customer clicks the button or link to add to the cart with specified quantity. 2. System adds the item(s) to the cart.
3. System prompt Customer to edit quantity or remove item from cart.
4. Customer confirms items in cart.
5. System stores cookie with cart details.
6. Customer returns to product listings.
Alternative Scenario:
A1. Customer terminates the web browser window after adding item(s) to cart.
A2. Customer returns to weborder interface.
A3. System recognizes cookie and goes to step 6 (Basic Scenario) with existing items in cart.
Postconditions:
The Customer has added item(s) to the shopping cart.

Checkout An Order
Goal:
Customer places and confirms an order for the checkout process.
Actors:
Customer Weborder System
Preconditions:
1. Customer must be logged-in on the system.
2. Customer must have item(s) in the shopping cart.
Triggers:
Customer clicks button or link to "Ckeckout"
Basic Scenario:
1. Customer clicks the button or link to initiate the checkout process.
2. System calculates order of items in the shopping cart.
3. System appends cookie with flag for checkout process.
4. System presents customer with account details and payment methods. 5. Customer confirms account details and payment methods.
6. Customer confirms order.
7. System stores order confirmation and order details.
8. System sends email confirmation to the Customer.
9. System appends cookie with flag for completed checkout process.
Alternative Scenario:
A1. Customer terminates order web browser during order the checkout process. A2. Customer returns to weborder interface.
A3. System recognizes cookie and goes to step 4 (Basic Scenario).
Postconditions:
The Customer has placed and confirmed an order.


Appendix C: Analysis Models


Appendix D: Issues List
1. Currently, telephonic orders are a significant source of business at Gamma-J which is both expensive and labor extensive. The organization has to figure out a way to have a smooth transition of orders coming in through telephones to the new online ordering system without loosing business to the competitor.
2. Gamma-J depends mainly on Fed-Ex for its tracking number and transportation needs to ship the orders. A separate module to generate the tracking numbers and having a transportation system will be considered in the future.
3. System does not support customer order analysis.


Appendix E: Data Dictionary
User ID = User ID of the employee /customer of Tool Co Company; minimum 4 to maximum 10 characters (alphabetic or alphanumeric)
Password = Password of the employee /customer of Tool Co Company; minimum 4 to maximum 10 characters (alphabetic or alphanumeric)
Item name = Name of the selected item; maximum 50 character alphabetic string 
Item ID = ID that uniquely identified the selected item; a 7-digit system generated alphanumeric character
Price = Cost of a single unit of the selected item; in dollars and cents.
Text description = special description of the selected item; maximum 100 alphabetic characters 
Shipping price = Cost for shipping the item to its destination; in dollars and cents 
Quantity = the number of units of each selected item that the customer is ordering; default = 1; maximum = quantity presently in inventory 
Total = Cost of a single unit of the selected item * Number of units of that item selected; in dollars and cents 
Name = Name of the customer; maximum 100 alphabetic characters 
Address = Location of the customer 
City = Name of the city for the above address; maximum 20 characters alphabetic string
State = Name of the state for the above city; maximum 20 characters alphabetic string
Zip code = The postal code of the above address; 5 digit numeric string 
E-mail ID = E-mail address of the customer who is using the Web order system; 50 characters alphanumeric 
Credit Card No. = Credit card number of the customer; 16 digit numeric string 
Shipping address = Address where the item has to be shipped 
Credit card expiry date = The date on the credit card when it will get expired; format MM/YY 
Order No = Unique confirmation number of the order to the customer; 9 characters alphanumeric 
Tracking No. =  Number to track the order; 20 characters alphanumeric
Shipping date = Date when the specified order is shipped; format MM/DD/YYYY
Location = Place where the item is kept in the warehouse in the form of (aisle, column, shelf)

1. Introduction
This document presents the business requirement of Unified University Inventory System
(UUIS) in Technology-independent manner. All attempts have been made in using mostly business terminology and business language while describing the requirements in this document. Very minimal and commonly understood Technical terminology is used. Use case approach is used in modeling the business requirements in this document.


2. Purpose
IUFA purpose is to integrate 3 faculties data bases providing Web interface that allows
user to access and manage the integrated inventory.
The IUFA guarantee a secure access to the data from outside university at any time during working hours


3. Scope
The IUFA application give the unauthorised user the possibility to use a web based interface that will available to use any time
IUfA involve to the following operations:
- Transferring assets
- Editing assets
- Modifying assets
- Adding inventory assets
- Creating request to borrow an asset or a reserve a space
- Retuning assets
- Creating a new space
- Approving requests
- Authentication
- Search
- Changing permission
- Output reports
   

4. System Description
4.1. Inventory assets
  Assets in the inventory are classified in 3 types
    Rooms and space
    Software licences
    All other assets
  Assets can be grouped like computer parts
4.2. University structure
  University organizational hierarchy is represented by the following
4.3. Users levels
 Three administrative levels that can approve inventory transactions
  University level (level 3)
  Faculty level (level 2)
  Department level (level 1)
  Users’ level can place inventory requests (level 0)
   IT and security level to maintain the inventory (level 4)
4.4. User roles
  A user can have one of the following role
  University administrators
  Faculty administrators
  Department administrators   
  Inventory administrators: users that can be delegated by any administrative level to work and on the applications assigned permission can varies from one user to another depending on its assigned tasks.
   Inventory administrators can be affected to any administrative or organizational level according to their assigned tasks
   Users: students and professors
   IT team system administrators that maintain the system
4.5. Permissions List
  Permission are should be grouped by role in the following way:
  Department administrator have control on his department inventory
  Faculty administrator have control on his faculty inventory
  University administrator and IT Administrators have the control on the entire inventory
  IT administrators can create different category of permission to help administrators to delegate a part of their tasks
  This list resume all permission that a user can have
1. Request related permissions
  request:create
  request:list
  request:show
  request:edit
  request:aproval or rejection
2. Asset related permissions
  asset:create
  asset:list
  asset:show
  asset:edit and modify
3. Location related permissions
  location:create
  location:list
  location:show
  location:edit
  location:delete
4.University related permissions
  universityPart:create
  universityPart:list
  universityPart:show 
  universityPart:edit
  universityPart:delete
5. search permission
  search:simple
  search:advanced
6. reports related permission
  report:list
  report:show
7. User actions related permission
  user:list
  user:show
  user:editand change permissions
8.  Audit related permissions
  audit:list
  audit:show

Note that permissions for each administrative level are predefined
  Level 0 has the permission to create requests only
  Level 1 can control the assets and locations that he owns
  Level 2 can control the assets and locations that owns and get all level1 permissions
  Level 3 can control the assets and locations that owns and get all level2 permissions
  Level 1, 2 and 3 can delegate some or all of their permission to any user
  Level 4 has all possible permissions. Level 4 for can create and assign permission to a new groups
         
 
5. Functional requirements
5.1. Transferring Assets
  Within the same department: data base can be updated directly without any request
  Inter departments: request must be approved by a DA group member and faculty group member unless it came from a higher level group
  Inter faculties transfer: request can be made by any authorised user and approved by faculty group or higher level
  Transfer outside university should be approved by the university group
5.2. Editing Assets
  Any administrative level user or inventory user can edit an asset that belongs to its department; same thing for faculty user, or university user; in order to make modification if he is authorised to do it.
5.3. Modifying assets
  all fields of an edited asset can be modified except Ids
  a bulk entry file can be used
5.4. Adding inventory assets
  Any DA group member or authorised inventory group member asset is owned by the department
  Any faculty member can add all related departments inventory
  Any university group member can add all assets in the inventory
  A bulk entry can be used to add many assets
5.5. Creating request to borrow an asset or a reserve a location
  request can be made by any authorised user
  After creation a request still pending waiting to be approved by an
administrative level user according to that have this authority
5.6. Retuning assets
  An inventory user should check returned asset and update inventory
5.7. Creating a new location
  IT group members can create a new space and modify floor structure when they receive an exception request from any administrative level
5.8. Approving requests
  Any administration level or authorised inventory group member can display all pending requests waiting for approval from this level and approve those requests
  When request is treated user is notified by email
  Request is added to the waiting for execution list
  Inventory is updated when user receive requested asset
5.9. Authentication
  Authentication is made by user name and a password for all users
  administrative level working on administration computer
5.10. Changing permission
  Any administrative level user can delegate another user to execute some or
  all his authorized actions. And this user acquires the role of inventory administrator
 5.11. Output reports
  Asset report by location
  Request report
  User permission user


6. Non functional requirements
  Usability
6.1.
  It is mandatory that learning time is between 2 to 4 hours at maximum, because many task are delegated to working students. Web interface should use clear and consistence terminology in such a way that user; with basic experience on internet and office; find the application easy to use
6.2.Availability
  The Application should be available always at working hours. Any maintenance or backup operation should be conducted out of working time
6.3.
  The Application should be installed in any Microsoft or Unix platform
  Web application should available to run on browsers like IE, Firefox, Chrome, Opera or Safari
  Portability
6.4.Security
  All user are authenticated by user name and a password
  Permission are assigned to user according to their roles
  Only IT team member can access and maintain data base servers locally Query is killed if takes more than 1 min
  Backup operation are executed periodically
6.5.Maintainability
  It is important to design system to facilitated future evolution and facilitate maintenance operations
   

7. USE CASES
Name: Modify Use Case
Identifier: MOD.UC
Description
The use case describes the modification that the Inventory Admin can do. Goal
The Inventory Admin initiates the use case. The use case presents all the modification that can be done by the Inventory Admin.
Preconditions
  The Inventory Admin is authenticated
Assumptions
  We assume that use Knows the results of each operation there is no go back actions
Basic Course
  Use case begins when Inventory Admin start searching for an asset
  Inventory Admin Edit the asset
  Inventory Admin modify asset properties
Alternate Course A:
Condition: administrator or authorised inventory user is working on waiting for approval list or waiting for execution list
 Inventory user or Admin Edit the asset
 Inventory user or Admin modify asset properties
Exceptional Course :
1.
  Inventory Admin search for asset
  Inventory Admin edit asset
  Inventory Admin asset out of inventory
  Message error because asset cannot be modified
2.
  Inventory Admin search for asset
  Inventory Admin edit asset
  Inventory Admin does not have sufficient privileges to edit asset
  Message error is displayed
3.
  Inventory Admin search for asset 2. no asset found
  Message error is displayed
Post conditions
  The system state change according to modification
Actors
  Inventory Admin, Inventory system, Authentication system
Included Use Cases
  Search use case
  Edit use case
  Authentication use case
Notes
  We suppose that Hosting system and servers support all the operations

Name: Edit Use Case
Identifier: EDT.UC
Description
  The use case describes the edit operation that the Inventory Admin can do.
Goal
  The Inventory Admin initiates the use case. The use case presents the edit done by the Inventory Admin.
Preconditions
  The Inventory Admin is authenticated
Assumptions
  We assume that use Knows the results of each operation there is no go back actions
Basic Course
  Use case begins when Inventory Admin start searching for an asset
  Inventory Admin Edit the asset
Alternate Course A:
Condition: administrator or authorised inventory user is working on waiting for approval list or waiting for execution list
  Inventory user or Admin Edit the asset
Exceptional Course :
1.
  Inventory Admin search for asset
  Inventory Admin edit asset
  Inventory Admin does not have sufficient privileges to edit asset 4. Message error is displayed
2.
  Inventory Admin search for asset 2. no asset found
  Message error is displayed
Post conditions
  The system state change according to modification
Actors
  Inventory Admin, Inventory system, Authentication system
Included Use Cases
  Search use case
  Authentication use case
Notes
  We suppose that Hosting system and servers support all the operations

Name: Add New Asset Use Case
Identifier: ANI.UC
Description
  The use case describes the operation of adding a new asset to the inventory.
Goal
  The Inventory Admin initiates the use case. The use case presents how Inventory Admin can add new inventory asset.
Preconditions
  The Inventory Admin is authenticated
Assumptions
  We assume that use Knows the results of each operation there is no go back actions
Basic Course
  Use case begins when Administrator start a new asset
  Administrator select asset type
  Administrator select asset location
  Administrator select owner
  Administrator fill all asset properties
Alternate Course A:
  None
Exceptional Course:
 Use case begins when Administrator start a new asset
 Type does not exist in the list
 Administrator send exception request to IT to add the new type and the common
 properties
Post conditions
  Data base is updated
Actors
  Inventory Admin, Inventory system, Authentication system
Included Use Cases
 Authentication use case
Notes
  We suppose that Hosting system and servers support all the operations

Name: Create request Use Case
Identifier: CRQ.UC
Description
  The use case describes the activity of creating a new request that the User can do. 
Goal
  The User initiates the use case. The use case presents request process that can be done by User.
Preconditions
 The User is authenticated
Assumptions
  We assume that use Knows the results of each operation
  Only basic request form is available for level 0
  Requests forms provide search facilities to users levels 1, 2 and 3
Basic Course
  User select basic request form
  User type a small request text specifying asset (s) location,..
  User click on submit
Alternate Course A:
  User select advanced request form
  User enter asset serial number and location
  User enter small text describing operation to be done
  User click on submit
Alternate Course B:
  User select advanced request form
  User enter asset serial number and location
  User enter small text describing operation to be done
  User can add as many assets as he wants to the list by clicking add another asset button
  User click on submit
Alternate Course C:
  User select exception request form
  User enter a text message describing the exception that occurs
  User click on submit
Exceptional Course :
  User search for asset
  Asset not available to be borrowed 3. Error Message is displayed conditions
  A new request is pending waiting approval
Actors
  Inventory Admin, Inventory system, Authentication system
Included Use Cases
  Search use case
  Authentication use case
Notes
  We suppose that Hosting system and servers support all the operations

Name: Returning Asset
Identifier: RTI.UC
Description
  The use case describes the returning asset update that the Inventory Admin can do. Goal
  The Inventory Admin initiates the use case. The use case presents all the updates to the inventory that can be done by the Inventory Admin.
Preconditions
  The Inventory Admin is authenticated
Assumptions
  We assume that use Knows the results of each operation there is no go back actions
Basic Course
  Use case begins when Inventory Admin start returning
  Inventory Admin select asset state to available
Alternate Course A:
Condition:
  Use case begins when Inventory Admin start returning
  Inventory Admin select asset state to damaged
Exceptional Course: 
Post conditions
  The inventory system is updated
Actors
  Inventory Admin, Inventory system, Authentication system
Included Use Cases
  Authentication use case
Notes
  We suppose that Hosting system and servers support all the operations
   
Name: Approving Request
Identifier: APR.UC
Description
The use case describes the approving of requests that an Inventory Admin can do. 
Goal
  The Inventory Admin initiates the use case. The use case presents all the approval or denial of a user request that can be done by an Inventory Admin.
Preconditions
  The Inventory Admin is authenticated
 Request list not empty
Assumptions
  We assume that use Knows the results of each operation
Basic Course
  Use case begins when Inventory Admin display pending request list
  System display only requests that he has privileges to approve
  Inventory Admin select request that he want to approve
  Approve is confirmed
  System send notes to users
Alternate Course A:
Condition:
  Use case begins when Inventory Admin display pending request list
  System display only requests that he has privileges to approve
  Inventory Admin select request that he want to reject
  rejection is confirmed
  System send notes to users
Exceptional Course: 
Post conditions
  The Inventory system is updated
Actors
  Inventory Admin, Inventory system, Authentication system
Included Use Cases
  Search use case
  Edit use case
  Authentication use case
Notes
  We suppose that Hosting system and servers support all the operations

Name: change permissions Use Case
Identifier: CHP.UC
Description
The use case describes the modification that Department, Facutly or University Admininistrator can do to a user permissions.
Goal
The administrator initiates the use case. The use case presents all change that can be done by the Admininistrators.
Preconditions
 The Administrator is authenticated
Assumptions
1. We assume that use Knows the results of each operation
2. Administrator knows the role of each permission on the permission list
3. Administrator cannot assigne permissions more than he have
1. 2. 3.
1. 2. 3.
2. The permissions of user are changed
Basic Course
  Use case begins when Administrator press change permission
  Administrator select user
  Administrator modify permissions
Alternate Course A: Condition: 
  None
Exceptional Course:
  Administrator select user
  Administrator modify permissions he give permissions more than he have
  An error message is displayed
Post conditions
  None
Actors
  Administrator, Inventory system, Authentication system
Included Use Cases
  Authentication use case
Notes
  We suppose that Hosting system and servers support all the operations

Name: Authentication Use Case Identifier: ATH.UC
Description
  The use case describes the authentication. 
Goal
  The User initiates the use case. The use case presents authentication operation
Preconditions
  None
Assumptions
  We assume that use Knows the results of each operation
Basic Course
  Use case begins user starts the application
  User write user name and password
  User press login
  User is authenticated
  User log on to application main page
Alternate Course A:
  None
Exceptional Course:
  Use case begins user starts the application
  User write user name and password
  User press login
  Authentication fails
  An error message is displayed
Post conditions
  User is authenticated
Actors
  User, Authentication system
Included Use Cases
  None
Notes
  We suppose that Hosting system and servers support all the operations

Name: Search
Identifier: SRCH.UC
Description
  The use case describes the search operation that only authorised users can do.
Goal
  The User initiates the use case. The use case presents search and advanced search that can be done by the User.
Preconditions
  The User is authenticated
  Search operation is authorised
Assumptions
  We assume that use Knows the results of each operation
Basic Course
  Use case begins when User start fill searching field
  Press submit
  Search results are displayed
Alternate Course A:
  Use case begins when User press advanced search
  Fills fields
  Press submit
  Search results are displayed
Exceptional Course :
  Use case begins when User start fill searching field
  Press submit
  No results are found message is displayed
Post conditions
  None
Actors
  User, Inventory system, Authentication system
Included Use Cases
  Authentication use case
Notes
  We suppose that Hosting system and servers support all the operations
 
Name: Create Reports Use Case
Identifier: REP.UC
Description
  The use case describes the creation of reports that the User can do. Goal
  The User initiates the use case. The use case presents reports that can be created by the User. Three reports can be created Reports
    User Permission Report
    Request Report
    Assets By Location Report
Preconditions
 The User is authenticated
 User is authorised to create reports
Assumptions
  We assume that use Knows the results of each operation
Basic Course
 Use case begins when User click on a report type
 General report is displayed
 Report can be filtered
 Fields can be sorted
Alternate Course A
  None
Exceptional Course
  None
Post conditions
  Report is generated
Actors
  User, Inventory system, Authentication system
Included Use Cases
  Authentication use case
Notes 
We suppose that Hosting system and servers support all the operations

Authentication System
Authentication
Create
Reprot
User
User Permission Report
Request Report
Assets By Location 
Report
Inventory System
REP.UC Create reports Use Case

8. Entity relationship diagram

9. Cost Estimation (COCOMO)
   Considering a 3 months project (14w), 8 people working 10 hours/weak => 1120 hours (/160h) = 7 person months
PM = ai*EAF*KSLOC^bi
KSLOC = (PM/(ai*EAF))^(1/bi)
KSLOC = 1.078
Pricing per hour = $20 Project Total = $22,400.00
  
10. References
[1] Shari Lawrence Peeger and Joanne M. Atlee. Software Engineering: Theory and Practice.
Prentice Hall, fourth edition, 2009. ISBN: 978-0-13-606169-4.
[2] Object-Oriented Software Engineering: Practical Software
Development using UML and Java, Timothy Lethbridge, ISBN: 0077109082 Publisher: Mcgraw-Hill
Edition: 2
[3] The Elements of UML 2.0 Style
Cambridge University Press, 2005 ISBN: 0-521-61678-6 http://www.agilemodeling.com/style/useCaseDiagram.htm
[4] Class diagram – Wikipedia
http://en.wikipedia.org/wiki/Class_diagram
[5] Sequence Diagram - Wikipedia http://en.wikipedia.org/wiki/Sequence_diagram

1. Introduction
1.1 The document defines the operational requirements for Gemini Control System software. The goal of the SRS is to provide a functional tool for guiding the development of controls and data acquisition systems in a manner consistent with their operation within the Gemini System. It establishes both general criteria and specific functional requirements for software and controls design in the Gemini Project.

1.2 It is oriented toward the developers of control and data acquisition systems, not toward the science user of the Gemini telescopes. As such, it logically follows the Operational Concepts document, which addresses the control of the Gemini system from a more general perspective. The impacts of the science requirements, as well as requirements of control system design are covered in this document.

1.3 This document is based on information found in the following documents

1.5 Overview
Gemini software is all software directly involved in the control of Gemini systems, including commercial packages used for that purpose. However, only the non-commercial portions of this soft ware are addressed in detail here, along with the interfaces to those commercial packages.
If this document is viewed as presenting a set of standards for software development, then the software used with the Gemini telescopes can be viewed as falling into the following categories:
A. Developed software - non-commercial software developed for the control of the telescopes and instrumentation. This software falls under the specifications presented here and this document can be viewed as a guide to developing that software.
B. Supported software - commercial or “public-domain” software used for telescope control and instrumentation. One of the design goals for Gemini software is to use as much off-the-shelf software as possible, in an effort to decrease life-cycle costs and maintenance concerns. However, the nature of this software makes it difficult to force into the specifications here. Consequently, this document presents the interface specifications required of such software and encourages potential adopters of this software to evaluate it in terms of the specifications presented here.
C. External software - any software available to the Gemini system that is not integral to the system. User-supplied data reduction tools, operating systems, CASE tools, etc. are generally considered external software. Only the interface requirements to such software is considered part of the Gemini software.
Software that is embedded into hardware and that presents no software interface to the Gemini system is also considered external software and need not be considered further. Embedded software that does interface with the Gemini system via software is considered Gemini software and is subject to the requirements presented in this document.
All software will be maintained under a version control system, and must include facilities for easy (nearly automatic) inclusion into the Gemini software environment.

1.6 Credits
This document draws heavily in form and general content from ESO's VLT Software Requirements Specification, Issue 1.0 (VLT- SPE-ESO-10000-11).
                                                                                              


2. General Description
2.1 System Users
The users of the Gemini system are classified into the following categories.
A. Astronomer. This person is using the Gemini system for the collection of science data. In a very real sense, the astronomer is the customer for the services provided by the Gemini telescopes. The astronomer has worked out, with the Gemini system, a science plan for the collection of the data. This science plan may include interactive observing.
B. Science observer. This is the on-site person responsible for monitoring the data acquisition and validating the data integrity being collected for the astronomer, as well as ensuring that the science plan is functioning to the needs of the astronomer.
C. Telescope Operator. The on-site controller of the telescope and instruments. This person is responsible for ensuring the integrity of the system and for keeping the system functioning accurately during observations. The Telescope Operator works with the Observer and the science plan to produce as good data as is possible.
D. Support. On-site (or near-site) support personnel are responsible for the maintenance of the system, hardware and software, as well as the installation of subsystems and configuration changes.
E. Developer. Developers are responsible for the designing, testing, configuring, and upgrading of subsystems.
F.Administrator. Administrators are responsible for high-level functional control of the Gemini system as an integrated system. They work with other users to determine appropriate observation scheduling changes, maintenance down-time, and system modifications. It is possible that a particular individual would fall into several of the categories. For example, it is not unusual for the astronomer to also be the science observer.

2.2 Operational Levels
The Gemini system, when powered on, exists in one of several disjoint operational levels. Access to the system is restricted according to the current level of operation.
The operational levels are:
A. Observing level. The observing level is the “normal” operational mode of the system.
B. Maintenance level. Maintenance level permits access to all subsystems for routine maintenance and diagnostic work. The telescope is typically at maintenance level during daylight (non-observing) hours.
C. Test level. The most primitive operational level, test level operation is used for installation/deinstallation of subsystems, including full diagnostics and installation calibration activities.

2.3 Access Modes
At any level, but particularly during observing level operation, the software imposes on the Gemini system a series of access modes. These access modes balance ease and convenience of use against flexibility, control, and the security of the system.
The access modes provided by the Gemini system are:
A. Observing. This mode provides simple and safe access to the system for the collection of science data, selection of instrument parameters, and quick-look data reduction. Access to the system is through the sequencer with no direct control of telescope and instruments
B. Monitoring. This is a special, read-only case of the observing mode that can be invoked on a subsystem basis. Under no circumstances should monitoring affect the performance of an ongoing observation.
C. Operation. This is the access used for direct control of the telescope and instruments, typically during observation level operation. It is normally available only to the Telescope Operator and the science program sequencer when at operation level.
D. Planning. Access to the Gemini system is provided during science planning. Actual access to the telescope is not permitted in this mode, but the virtual telescope capability of the Gemini system provides a telescope simulator that is useful for planning observations, as are on-line databases.
E. Testing. Test access allows full, direct control of any subsystem. All features of the subsystem are available in this mode. Under no circumstances should testing affect the performance of an ongoing observation.
F. Administrative. It is possible to inquire about system utilization, efficiency, etc. using administrative access. No control is available in this mode, only status and scheduling information is accessible. Under no circumstances should administrative access affect the performance of an ongoing observation.
It is entirely possible for a single user to be accessing the system through several modes simultaneously. In fact, this is the typical situation with the Telescope Operator, who is often concurrently accessing the system through the observer, monitor, and operator modes. There are times when an astronomer might be using both observer and monitor modes.

2.4 Location of Users of the System
Users of the system will be located at one or more facilities. These are referred to in general as Gemini 8m Telescopes operations facilities. The Gemini 8m Telescopes enclosure and Gemini 8m Telescopes control facility are referred to collectively as the Gemini 8m Telescopes site.
2.4.1 
This is the enclosure housing the telescope. In general such use would be limited to maintenance and engineering.
2.4.2 
This is the facility collocated with the enclosure. It is from here that nightly operations would take place.
2.4.3
This is the facility where off duty personnel reside while stationed on the summit. This would be the Hale Pohaku facility on Mauna Kea and Cerro Tololo in Chile (assuming no support facility is constructed on Cerro Pachon).
2.4.4
This is the facility where offices, shops, etc. are located. On Hawaii this would be with the JACH in Hilo and in Chile it would be either the La Serena or Cerro Tololo facilities.
2.4.5
These are super sites, in general located in partner countries, which have direct links to the telescopes via communications lines. They may or may not be collocated with any administrative organization associated with the Gemini telescopes. These sites have remote operations capability.
2.4.6
These are sites with high bandwidth connections to the super sites. They have remote operations capability but at a reduced level.
Will these high bandwidth connections be private or public, or doesn’t it matter? I don’t understand the different between a remote operations facility and a satellite site. Why does the satellite site not just connect directly to the telescope? — Steven.
2.4.7
These are sites, generally located at existing observatories, universities, etc. that have some form of connectivity, perhaps via satellite sites and/or super sites, to the telescopes. Although they have remote operations capability, the link capacity will determine at what level.
Does this statement mean that the Gemini system has to support remote operations at a level which depends on the remote site’s capability? Perhaps a table showing what is achievable as the capabilities of the site get better would be useful. The sort of thing I have in mind is:
                                                                                                                                                                                                                                                                                                        
Capability of site
  1. High speed link direct to Gemini telescope — same speed as Gemini Contol and Data LANs.
  2. Slower communication link direct to Gemini telescope.
  3. A PC, printer, ISDN connection and a modem.
  4. A telephone line only.
Remote observing capability
  1. Full control and monitoring capability from remote workstation (but no access to event and synchro buses).
  2. Remote control and monitoring by copying the operator’s screen (with some data compression).
  3. A voice communication link, compressed digitized video link, FAX, and the ability to log in and examine the status files and observing logs.
  4. A voice communication link only, plus FAX if a machine is available.

2.5 User-level Requirements
2.5.8
Each class of users has different needs of the system. The general requirements of each user class are summarized below.
TABLE 2 - 2 User-level requirements
User Class 
  1. Astronomer
  2. Science Observer 
  3. Telescope Operator
  4. Support
  5. Developer 
  6. Administrator
Operation Level 
  1. Observing
  2. Observing 
  3. Observing, maintenance, test
  4. Maintenance, test
  5. Maintenance, test
  6. Observing, maintenance, test
Access Mode
  1. Planning, observing, monitoring
  2. Observing, monitoring 
  3. Observing, monitoring, operation, testing
  4. Monitoring, operation, testing
  5. Monitoring, testing 
  6. Monitoring, administrative
User Interface
  1. Simple, safe, controls grouped for convenience of observation activity. 
  2. Same as for astronomer. 
  3. Organized for ease of control and quick response to unsafe conditions, ability to monitor all subsystems as needed. 
  4. Must allow full access to all subsystems.
  5.  Must allow full access to each subsystem in test. 
  6. Simple, safe, status inquiries only.
Also, from a human engineering perspective, user interfaces for different access levels should be uniform across all subsystems, though different access levels should present different ‘look-and-feels’.
2.5.9 Users of the System
Unless the contrary is explicitly stated, all requirements and modes presented are intended to be available to all users of the system.
It should also be noted that what the system has to guarantee in terms of operations must fulfill all possible requirements, but it does not mean that all features will be made available to all users at all locations at all times.
The available capabilities will have to be adapted to the operational needs both locally and remotely and these decisions can only be taken later in the life of the project.
2.5.9.1 Astronomers and Observers
• Definition
Observing astronomers are the end users of the system. They range greatly in experience from occasional users of the system to very experienced users such as staff astronomers at the Gemini 8m Telescopes site and service observers.
• Purpose of work
Whatever their level of experience, observing astronomers will wish to concentrate on the efficient acquisition of astronomical data and on-line assessment of data quality, rather than on the details of controlling the telescope and instruments.
To allow observing astronomers to achieve this objective, the system must offer to a user an interface which, while fulfilling the various operational requirements in the different modes and offering status information both automatically and on request at any required level, is still simple to learn and secure in its use.
• Privileges
Observing astronomers shall have no privileges as far as the direct control of the telescope is concerned. They shall not be able to send control commands directly but they must be able to enquire about the status of the telescope or any subsystem at any time. The intent is not to restrict the capabilities of the observing astronomer in any way but rather to establish a single point of control and responsibility. Programs, as opposed to observers, may have the capability of direct control of the telescope. This would allow the observer to create an observing program which requested a telescope control function but would not allow the observer to enter (for instance) a command to slew the mount. Astronomers are typically given control access to instruments, however.
• Operation mode
Traditional interactive operation shall normally be replaced by operation via an automatic sequencer. This is essential to support operational requirements such as service observing and flexible scheduling (as defined later in Section 2.7 on page 2-12).
A certain degree of interaction shall be provided, meaning in this case that the user will interact with the scheduler program, rather than with the control programs directly.
Observing commands will normally be submitted via the User interface to a queue for later execution. It must also be possible to break and resequence this queue. e.g. as a result of the quality assessment of previous data.
In particular, Operations staff will be able to enable direct interactive operation, but this shall not be considered as the normal operation mode for the reasons explained in Section 2.7 on page 2-12. It is evident that, for some functions (such as adjustment of spectrograph slit width for seeing conditions) it must be necessary to include interactive capability. However each instance of such a function should be examined as a candidate for automation - such as focussing.
The existence of the scheduling queue shall be transparent to the on-site observer during the initial phases of telescope operation. Only after experience has been gained with the system will the existence of the queue become evident to the on site observer.
2.5.9.2 Operations Staff
• Definition
Currently, operations staff includes 'night assistants' and staff of the 'operations group'. Depending on the operations implemented on the Gemini 8m Telescopes, they may become telescope operators, operations supervisors of the Gemini 8m Telescopes telescope, and instrument operators and have to overview the Gemini 8m Telescopes operation.
These users will be very experienced users of the system. They will be very familiar with the Gemini 8m Telescopes and/or its instruments.
• Purpose of work
Operations staff will control the Gemini 8m Telescopes indirectly via a scheduler program or directly via commands. They will supervise telescope operation and will be able to advise observing astronomers on what they have to do to use telescope and instruments efficiently. They shall also monitor general performance and system safety.
• Privileges
Operations staff shall have privileges to access all commands and maintenance procedures in case of problems. This includes direct control of physical units.
However, they shall not have access to subsystems while these are in normal operation. If they need to access other parts of the system appropriate reconfiguration procedures have to be run.
• Operation mode
Operations staff shall have access to operation tables in update mode, while observing astronomers will have access to them only in read mode (for example the list of filters mounted on an instrument). Again, the intent is not to restrict the capabilities of the observing astronomer in any way but rather to establish a single point of control and responsibility. At the present time it is not clear how to handle visitor instrument requirements in this area.
They shall be able to change the operational status of units according to the results of tests performed on such units (e.g. to see if a faulty unit can be declared as operational again and redefined as part of the environment in use).
2.5.9.3 Software Development and Maintenance Staff
• Definition
Software development and maintenance are staff:
  based either at the Gemini 8m Telescopes site or base facility, or
  based at the Gemini 8m Telescopes remote operations facility, or
  non Gemini staff from a contract company or from an associated Institute.
  These users will have a deep understanding of the way the Gemini 8m Telescopes software works.
• Purpose of work;
Software development and maintenance staff intervene when there is a major problem to be solved or an upgrade to be installed. They also perform system generation and installation of new software packages or new releases, according to established test and validation procedures.
• Privileges
Software development and maintenance staff need the highest privilege in order to be able to modify everything in the system. Nevertheless strict configuration control guidelines must be followed to prevent interference with ongoing normal operation.
• Operation mode
Software development and maintenance staff usually work at the test level (see
Section 3.2.1.3 on page 3-4) for the part of the software under test. Other parts of the Gemini 8m Telescopes may also need to run in test mode to support integration tests. This means that a number of commands are available which allow the hardware concerned to be tested (test commands) and are not accessible to observing astronomers.

2.6 Operational Context
This section derives directly from Gemini 8m Telescopes program requirements and specifies the operational context, which is a direct consequence of the structure of the Gemini 8m Telescopes system.
The Gemini 8m Telescopes operation has to cope with a complex environment produced by:
  multi-telescope concept 
  multi-instrument context 
  visitor instrument context
  multi-user context
2.6.1 Multi-telescope Context
Although there are two telescopes as part of the Gemini system there are no plans to support concurrent use of them as if they were a single facility. It is, however, a long term goal of the Gemini project to be capable of being used in conjunction with nearby, perhaps non-Gemini, telescopes on the same site (for instance for interferometry).
2.6.2 Multi-instrument context
Normally three scientific instruments are mounted on the cassegrain focus of the telescope. The Gemini 8m Telescopes are thus characterized all the time as in a multi-instrument context.
Parallel access to all the mounted instruments shall be provided, though only one instrument has access to the telescope beam (active instrument).                                                                                                                                                      
Instruments which feed two detectors by using beam splitters or field splitters is considered as a single active instrument. Feeding two separate instruments via beam splitters or field splitters and providing separate control nodes is not a requirement.
Various situations are possible for the other (inactive) instruments: •they shall be able to take calibration or flat field exposures in parallel
•they shall be able to prepare for an exposure to start as soon as the telescope beam is switched back to them (in this case, they are in a hot standby situation)
•they shall be able to work; at all foreseen operation levels (observing, maintenance, test) (see Section 3.2.1 on page 3-3).
Regardless of the status of an inactive instrument, it shall not be possible for any of its permitted actions to adversely impact the active instrument.
2.6.3 Visitor instrument context
The requirement to provide for support, installation, and operation of outside instruments brought by the observer has several implications for the system. Due to the specialized nature of visitor instrumentation it is unlikely that complete integration into the Gemini environment is either feasible or warranted. In this case a subset of the available functionality must be made available through a standardized interface. The Gemini Telescopes view all instruments as operating as servers, responding to commands from the upper levels of the system. Visitor instruments must be capable of operating in this mode to be adequately supported.
It should be the goal of this interface that it be a subset of the existing instrumentation interface (rather than a separate system). At a minimum this interface should support:
  acquisition of status information of instrument by other systems 
  capability to enter preprogrammed observing sequences 
  capability to offset the telescope position and focus
It should be a goal, but not a requirement, that the interface provide support for
  coordinate transforms between visitor instrument and the Gemini system
  archiving (or archivibility) of visitor instrument data
  maintenance of operations tables (such as filter lists) which can become part of an observation's permanent record
Due to the nature of visitor instrumentation it is unlikely that more complicated functionality can be supported. In particular coordinated motions of the Gemini system components with those of the visitor instrument (other than simple raster scans) will not be supported.
This does not mean that more complicated functionality will not be possible for visitor instruments that require it. Such functionality will not be offered as a standard service but will require a joint effort on the part of Gemini and the visitor instrument team. As more complicated functionality will be supported via standardized interfaces for the Gemini instruments, such as coordinated motions, it should be possible to adapt visitor instruments to this standard. The difficulty with offering such services as an externally supported standard, as opposed to an internally supported standard, is that decisions to change internal standards do not impact external users.
It is important that the visitor instrument interface be stable and long-lived, as the time between successive uses of the same visitor instrument can be as long as one or two years.
The support of visitor instrumentation is made simpler if the visitor equipment adheres to the Gemini standards. However it must be recognized that:
  the Gemini standards may not prove cost effective for some visitor instruments
  the Gemini standards will evolve over time as requirements and technology change
  the evolution of Gemini standards might require existing visitor instruments to rewrite or rework large areas of their control system
  visitor instruments built later in time than the initial complement of Gemini instruments may want to take advantage of different and/or less expensive technology if it better suits the goals of their project
For these reasons it is probably not possible to establish a combined standard to which all instruments, both Gemini and visitor, adhere to completely. It is much better to establish a subset of Gemini facilities which will be made available to visitor instruments via long lived, stable interfaces. Visitor requirements outside of these would be handled on an as needed basis.
The support of both Gemini and visitor instruments would benefit by the provision of a Gemini observatory simulator. This simulator, appearing to the instrument as a standard set of hardware and software interfaces, would present a functional definition of the observatory.
2.6.4 Multi-user context
The requirements to have instruments operated as single units imply that several user stations will be active at the same time on the Gemini 8m Telescopes. On these user stations, different kinds of users may be working at the same time with the Gemini 8m Telescopes software.
Independently of the location of users at the telescope site, they shall be able to access (according to their privileges) any part of the whole setup with a simple logon and configuration operation. In other words. any subsection of the whole Gemini 8m Telescopes system should be accessible and controllable from any single point (but of course with protection ensuring security and safety).
A particularly simple case of multi-use of the system is multi-point monitoring. By this it is meant that, while some (active) user is in control of the Gemini 8m Telescopes, someone else can follow what they are doing by monitoring all the relevant data from telescope and instruments. This will typically be needed by the operation supervisor. All other users wishing to monitor Gemini 8m Telescopes operations have to go through the procedures set up by Operations and get permission to do so.
The multi-point monitoring mode might also be important when certain difficult or rare problems occur, when expert advice is needed and can only be obtained from colleagues situated remotely. Multi-point monitoring allows them to follow directly the results of tests performed and investigate how the system is working (e.g. by selecting different display pages with the up-to-date status information on different parts of the system).
Multi-point monitoring also allows a local observer to be monitored and advised by a remote supervisor.
Monitoring shall exist both in the form of automatic displays of status information at different locations, and in the form of explicit access to the required status information from any point.
Monitoring shall not affect the performance of ongoing observations.

2.7 Observing Mode Requirments
The different observing modes (interactive, queue-based, remote-operations and service) impose constraints on software design.
2.7.1 Interactive observing 
Requirements:
A. Normally executed with the sequencer by providing a computer executable program, in order to make efficient use of the Gemini telescope.
B. Interactive operation is supported, but always through the Observatory Control System (OCS).
C. There is a visual user interface to the OCS to allow for changes to the viewing program. D.It is possible to have more than one station participate in the observing.
Interactive observing with time allocation for full nights is a first basic requirement of the Gemini 8m Telescopes. It is therefore an essential requirement that telescope operation is supported by the software in a smooth and very friendly way in this mode.
Interaction will normally be via an automatic sequencer (see Section 2.5.9 on page 2-6). This is clearly a top priority requirement and one which will have to be realized before implementing any other mode. The initial implementation of the automatic sequencer will operate in a “pass through” mode where all commands are accepted and transmitted with minimal checking and delay.
2.7.2 Queue-based
Queue-based observing is the primary observation mode used with the Gemini telescopes, as it is the best means of providing sound science data while maximizing efficient use of the telescope. While its requirements include all those given below for service observing, it has the following special requirements.
A. The observing program must be fully automated, requiring very little human interaction during the observation. The means that the Gemini software must include a sufficiently rich programming environment to make this feasible. In addition, this should be a visually-oriented environment providing a simple, easy-to-use interface to the astronomer.
B. There should be a full telescope simulator to enable the astronomer to test observing programs for completeness, errors, and functionality. This simulator should function within the virtual telescope environment of the Gemini system.
C. All control software must provide support for simulated use within the virtual telescope.
D. There is a requirement for software to assist in object selection both within an observing program and across observing programs, in order to optimize observing efficiency. This software must consider target positions, weather conditions, and instrument configurations.
E. There must be software to support the flexible scheduling, both manually and via a scheduler, allowing for the interleaving of observing programs in a manner that is transparent to the individual observing programs. This includes managing the collection of science, environmental, engineering, reference, and calibration data.
F. To maximize the use of the available observing time it must be possible to queue all of the observing that is possible with the currently available instruments. These would be in the form of preprogrammed observing sequences. It should be possible to resort the queue so that the next observation to take place comes to the front of the queue. This sorting will be based on properties of the individual observing sequences, current site conditions, and other rules established by the observatory directorate.
While these rules have yet to be worked out one could imagine rules such as “no more than 15% of observing will be preempted” or “a 10% overhead to the prime observing project is acceptable in order to pick up observations in similar parts of the sky with identical filters”.
Thus queue scheduling is a superset of preprogrammed observing, with similar requirements. As the costs of implementing such a scheduler are currently difficult to estimate it may prove necessary to implement it in a future phase of the project. The system design, if it does not include a scheduler, should specifically allow for its future implementation.
2.7.3 Remote operations
Remote operations includes both remote observing, with the science observer offsite, and remote telescope operation, with control of the telescope also offsite. It also covers remote eavesdropping, monitoring, configuration, and diagnosis. (There will always be support staff on-site during observations, however.) The requirements for supporting remote operations are:
A. All software should be developed to permit remote operations. There should be no conceptual difference between software working on-site and remotely.
B. All observing facilities should work both on-site and off-site. It should be possible to do full operations remotely.
C. Team observing, with multiple observers at different sites should be supported.
D. It must be possible to restrict specific operations to specific remote sites. For example, at the Mauna Kea site, remote telescope control might be restricted to Hale Pohaku. The method used to restrict such operations should be independent of the operations themselves, and dynamic.
E. It is assumed that the hardware involved in remote operations has been specified with sufficient bandwidth to support remote operations. However, we will take advantage of commercially available protocols such as ISDN, TCP/IP, Internet, etc.
The choice of the name remote operations is meant to suggest an entire category of operations, such as remote observing but also remote access for diagnostic support. In this sense it is more general than pure remote observing.
Despite the obvious limitations introduced by the link bandwidths available at the different locations, the system shall be totally transparent to local or remote use. It is only necessary that the functionality of the system be transparent, it is accepted that the speed of the link will determine the perceived transparency of the system. However the system design should minimize the impact of link bandwidth on transparency.
Security of operation shall be considered and might imply different operation levels and privileges at different sites.
It is required that the remote operations software be considered from the beginning in the Gemini 8m Telescopes software design, to avoid redesign later. This should reduce the amount of specific software needed for remote operations, as the common layers of software shall cope from the beginning with a distributed environment.
2.7.3.1
Remote control means that the function normally associated with a local Telescope Operator, that of entering telescope control commands, would be available from a remote site. In practice remote control will be restricted to the Gemini 8m Telescopes Enclosure and Gemini 8m Telescopes Control Facility. The philosophy behind this is that, for safety considerations, telescope control commands cannot be issued without a staff member (not necessarily the same person) having direct access to:
  a hard wired “stop” button
  real time video and audio 
  control of the telescope
2.7.3.2 Remote Observing
Remote observing means that users shall be able to observe from a remote site such as Cerro Tololo, Hilo or even home Institutes. This possibility has to be provided on the Gemini 8m Telescopes.
The extent to which realistic observing conditions can be reproduced depends, of course, largely on the link bandwidth available. Experience with previous telescopes at other observatories shows, however, that, even with very limited bandwidths, remote observing can be implemented, provided the software is suitable for this.
Remote observing, as meant in this context, does not mean remote control. Remote users shall normally interact with the system via
  operators at the Gemini 8m Telescopes control facility
  operators at the Gemini 8m Telescopes site facility
  operators at the Gemini 8m Telescopes base facility
  operators at the Gemini 8m Telescopes remote operations facility 
  via the scheduler program
and shall not control any part of the Gemini 8m Telescopes directly.
In the last case they will use a remote User interface to submit commands to the Gemini 8m Telescopes scheduler at the Gemini 8m Telescopes site.
2.7.3.3 Multipoint Monitoring
In this mode the monitor's screen appears as a duplicate of that seen by the observer. The monitor's keyboard would not have any effect on the observer's environment.
2.7.3.4 Remote Monitoring
Remote monitoring is the simplest level of remote observing. It is sometimes called 'eavesdropping'. It is a requirement for the Gemini 8m Telescopes operation and will complement service observing, making it friendlier for users. Remote monitoring coincides to a large extent with multipoint monitoring, but allows the remote user to “pick and choose” the information that is displayed on the remote screen. There is no requirement that the remote screen be a duplicate of the local screen. The remote keyboard will have no effect on the local user's environment.
A remote observer might also need a real-time video and voice link with the operator in the control room, perhaps using a portable video camera which the operator can position as necessary. It is assumed this facility is provided entirely by hardware, and is beyond the scope of the Gemini software.
2.7.3.5 Remote Access                                                                                                                                                
Quite apart from remote observing, remote access to the Gemini 8m Telescopes and its instruments is required for monitoring and diagnostic purposes. This might be necessary to back up local users expertise and to help in case of problems. Remote access, in this case, must be possible from the Gemini 8m Telescopes base facility.
Distributed access to the Gemini 8m Telescopes software, once implemented. also allows, without extra requirements, local access (at the Gemini 8m Telescopes site) or remote access (Gemini 8m Telescopes support, base, and remote operations facilities).
2.7.4
Service observing implies that the Gemini staff are responsible for performing the actual data collection for the astronomer. A special case of service observing, queue-based, is given earlier, and assumes that the observing program can be executed with minimal interaction with the client astronomer. The more general case, where a science observer is present on site and the client astronomer is remotely connected, is considered here. The requirements specific to service observing are:
A. The observing program must be automated, requiring little human interaction during the observation. The means that the Gemini software must include a sufficiently rich programming environment to make this feasible. In addition, this should be a visually-oriented environment providing a simple, easy-to-use interface to the astronomer.
B. This programming environment should be available both to the astronomer, for developing the program, and to the observer, for review and adjustment of the program. This access may or may not be done concurrently on a shared environment.
C. The programming environment should allow for the communication of special notes, instructions, and comments from the astronomer to the observer, possibly involving multimedia techniques. The use of this feature would, however, be discouraged for queue-based observing.
Observing, as such, is the purpose of the Gemini 8m Telescopes system. But interactive observing is perhaps, in some cases, not the most efficient way to achieve this, although it will be necessary for certain kinds of observations (such as adaptive optics) and in certain phases (such as commissioning and test periods).
Service observing, on the other hand, means that the observing program can be performed by someone other than the proposing astronomer. It will be done on his behalf at a convenient moment that is not exactly predefined and may be intermixed with programs from other users. 
Service observing requires switching during the night among telescope modes and instruments. This might typically be a few times (2) per night, when sky conditions change.
It requires also that the observing program is so well specified that it can be executed by someone else. In other words, it requires a computer executable observing program.
Service observing requires a suitable organization to support it, and first of all, considerable experience with a smooth running system. For these reasons it can only be applied to the Gemini 8m Telescopes once the Classical observing requirement has been fulfilled and been in operation for a while. Nevertheless, the software and data structures to support classical observing which have to be present in a system that is only interactive at the start might require considerable redesign to be adapted later to the service observing requirement.

2.8 Observing Support
2.8.1 Planned Observing 
To achieve efficient service observing, queue observing, and flexible scheduling, it should be possible to carry out observations automatically, in accordance with predefined sequences of exposures, as is commonly done in space observatories.
This corresponds to what is meant by planned observing, which still requires competent monitoring at the Gemini 8m Telescopes site or remotely.
At the same time, one does not want to lose the advantages and the extra flexibility of ground-based astronomy. So whichever scheme is adopted to perform automatic sequences, interaction shall be allowed at the desired level (for example, only on error conditions, any time the user is allowed to break a sequence, etc.).
2.8.2 Flexible Scheduling
Flexible scheduling means the possibility of reacting to changes in weather and other conditions by allocating the current use of the telescope to the optimal observing program for those conditions.
It will require the use of service and/or remote observing, as users cannot stay around indefinitely waiting for the conditions required by their program. This can be complemented by remote monitoring, if users can be on standby at a suitably equipped remote site.
Flexible scheduling requires the possibility to change telescope scheduling quickly, exchanging observing programs. This can be achieved only with the help of appropriate scheduling software, which must advise the operations team on the best choice to make which is compatible with the relative priorities of the various observing programs. It should be recognized that such ‘expert scheduling’ software does not currently exist - it should be a requirement of such software that it have an operational mode which merely supports the decision making process by presenting appropriate information.
Flexible scheduling requires switching during the night among telescope modes and instruments (typically 2 times per night). Thus flexible scheduling is a superset of queue scheduling, with similar requirements.

2.9 General Software Requirements 
2.9.1 Control information flow
These requirements apply to the commands and replies between subsystems (including status information requests and replies), information flow to and from on-line databases, and commands and software for the IOCs.
Requirements
A. The syntax of control flow commands is to be consistent across the system, whether
accessing workstation software or IOC software. See Section 3.2.5 on page 3-6.
B. All subsystems must respond to a common set of commands to test operational status, inquiries as to version, perform self-tests, etc. These common commands are described in Section 5.3 on page 5-2.
All IOC subsystems must respond to additional common commands for such activities as start, stop, initialize, reset parameters, etc. These IOC common commands are described in Section 5.3 on page 5-2.
C. The support structure for communicating commands must be reliable, with a uniform ACK/NAK protocol adopted across all systems. Timeouts must be supported at approximately 500 msec.
D. Handshaking of commands between IOCs must occur within 100-200 msec, signaling acceptance of each command.
E. For commands allowing delayed replies, timeouts for that reply must also be supported.
F. Peak control information within the system is expected to be 100 TPS. This assumes bridging between communication sections, to isolate traffic in relevant sections only.
2.9.2 Astronomical data flow
The following requirements apply to the control and transfer of astronomical data in all forms (science, engineering, reference, etc.)
2.9.2.1 Requirements
A. Data flow. Data from detectors must be stored in the most effective method permitted by available technology. Astronomical data is often detector readout limited so that disk access and data transfer times are not significant. Maximum acceptable readout time for detector data is very dependent on detector type and size as well as the intended application:
  1. For focusing and related activities, maximum acceptable detector readout time is about 0.1 sec, though only a portion of the detector may be read during that time.
  2. For mosaicked, large optical detectors, a full readout of the detector must be done in about 2 or 3 minutes.
B. Concurrent data access and display. Since the Gemini system supports monitoring of operation, there must be the capability of providing multiple, simultaneous access to data. Data transfer between the virtual telescope system and attached workstations therefore imposes significant transfer requirements on the LAN. The LAN must support a transfer rate of 20-40 Mbits/second.
C. Data acquisition format. Data is normally acquired as uncompressed data, but may be compressed using a loss-less compression technique for transmission from the Gemini system or across the system LAN. The goal of compression is to minimize bandwidth impact on the LAN and WAN and to save space on removable media.
For data that requires preprocessing, such as infrared detector data, only the preprocessed data is stored.
D. Storage of data. Data from all instruments and detectors is stored as compressed data, using a standard format. There is a first level of storage within IOCs, to secure data in the event of link failures.
A second level of storage is on the Gemini system data disk(s), possibly also on removable media. Quick-look data quality assessment is done using this level.
Archiving of data is automatically done while in observing and maintenance level operation to the Gemini Archive subsystem. Shipping of data to a central archive follows later.
E. Data transmission format. Data is transmitted between Gemini and home Institutes using a FITS format and contains all header information provided with the data.
F. System-wide data capacity. The data capacity of the system is limited by transfer methods and technology, as well as archiving capacity on site. The system data capacity is capable of retaining 7 days of data produced by the largest instrument, the last 3 days of which must be available interactively from hard disk or similar medium.
2.9.3
Video information originates from target acquisition, guiding, and site monitoring cameras. The requirements for transferring video data are:
A. The system must allow for fast transmission of rough images every 0.5 sec. This may be assisted through the use of data-loss compression techniques (e.g. JPEG, MPEG, etc).
B. In addition, there is the need for transmission of images matching the original resolution. This high-quality transmission must require less than 20 sec, and can only be assisted with loss-less compression.

2.10 Operation Privileges, Protections, and Procedures 
To preserve the integrity of the system, there must be a system of privileges established at each operating level of the system. These privileges should be determined in a simple manner during logging into the system.
Protection against accidental interference is to be implemented using an Access Mode Allocation system that dynamically identifies and assigns resources as needed. Critical resources (those that can support only a restricted number of simultaneous uses) are assigned solely through this allocation system. The allocation system must ensure that the system cannot remain deadlocked with respect to this resource allocation.
Finally, procedures must be implemented for convenience and system integrity, to simplify and codify common tasks. The tasks that require such procedures include:
  Telescope start-up and shutdown.
  Telescope system self-testing.
  Instrument start-up and shut-down. This is not permitted to interfere with telescope operation.
  Instrument self-testing and self-diagnosis This is not permitted to interfere with telescope operation.
  Configuration and reconfiguration.
  Dynamic reconfiguration of observing configuration (beam switching without
restarting instruments and telescope).
  The control software should know what subsystems are installed and their status at all times.

2.11 General Performance and Reliability Requirements
2.11.1 Capacity
The Gemini software should have no hard restrictions on the number of simultaneous users, but should allow for policy decisions that do restrict the amount of simultaneous access.
2.11.2 Response Time
The response time requirements vary with the function. The appropriate limits are:
A. Every command must be accepted/rejected within 2 sec and before the corresponding action occurs. (This is different than the ACK/NAK response of the communications protocol - here, the target system must have examined the command and verified its validity.
B. Status display update must be within 4 sec at the local stations (certain functions, such as telescope position, may have tighter constraints). Remote station update response is given in the Requirements for Remote Operations section.
C. Requests of subsystems for status information must be answered within 5 sec and be possible in maintenance level operation.
D. Requirements for response times within the user interfaces are given in the User Interface requirements section.
2.11.3 Availability
All software bugs should be logged and then fixed as soon as possible after detection. The goal is to have restart conditions occur only on hardware failure.
Fault recovery, exception handling, fail-safe checks, etc. should be used to improve reliability.

2.12 Test and Checkout Requirements 
The telescope and instrument software shall contain built-in test (BIT) facilities to verify Gemini 8m Telescopes system and Gemini 8m Telescopes software performances.
Every Gemini 8m Telescopes software module shall have corresponding test specifications to check normal operation of releases, to be used both for acceptance tests and as an on-line test procedure.
The Gemini 8m Telescopes control software shall also provide for execution of self-test sequences of the Gemini 8m Telescopes system and subsystems. These shall automatically exercise all subsystems present in a given operational configuration.
Regression tests should be a part of every Gemini 8m Telescopes software package.

2.13 Contingencies
2.13.1 Fault notification 
Subsystems must notify the user when faults occur. This notification must be specific as to origin and problem. The notification must also be capable of being electronically logged. It may also prove useful to have multiple levels of fault notification such as detailed, verbose, short, etc. to aid in tracking down problems.
2.13.2 Fault tolerance
Should a subsystem fail (e.g. one detector, one instrument) predefined procedures must exist to redefine the environment in such a way that operation can restart with the remaining equipment.
In case of computer hardware failure concerning the user station equipment, it shall be possible to transfer control from one user station to another via a simple software reconfiguration procedure.
In the case of IOC failure, no transfer of control to another IOC will be possible, due to the local connections and interfaces to the control electronics. In this case there shall be a procedure to replace faulty cards and/or assemblies. If it is possible to observe with that particular IOC in a failed state (in general, this is limited to IOCs that are associated with individual scientific instruments) then it must be possible to reconfigure the system to do so.
2.13.3 Redundancy                                                                                                                                                                                   
Full redundancy is not a requirement of the Gemini 8m Telescopes and it will be acceptable to have to replace units in case of failure.
There are subsystems which are relatively inexpensive to support as redundant systems, such as telescope control computers. For each area where redundancy is decided to be cost effective, procedures for switching to the backup system will be established. There is no requirement for automatic switching to the backup system.
All communication shall be based on the use of standard communication protocols, where retry procedures are applied (a form of software redundancy) as part of the protocol.
Certain network concepts may be preferable as they offer intrinsic redundancy (e.g. double loops) and re-routing possibilities in case of node failures (single point failure protection).

2.14 Constraints 
The Gemini system software is designed under the following constraints.
2.14.1 User constraints 
A. There should be no restrictions imposed by the software on users. Only policy decisions (permissions, access privileges, etc.) should prevent any user from accessing any part of the Gemini system from any local or remote station.
B. Similar functionality should be presented to the users using similar user interfaces. However, user interfaces should clearly reflect access modes and operating levels.
2.14.2 Hardware constraints
Hardware constraints are covered in the individual chapters the Software Design Description.
2.14.3 Software constraints 
There are a number of general constraints placed on the Gemini Software. These are:
A. Commercial packages, off-the-shelf public domain software, and standards are to be used whenever feasible.
B. Existing external software will be integrated with the Gemini software. The interfaces involved in this integration are considered part of the Gemini software system.
C. All Gemini software is to be developed using standard methodologies and development environments. One of the goals of Gemini software is that all components be easily (preferably automatically) combined into an integrated system.
D. Gemini software developers should maintain accurate change logs showing software modifications as they are applied to the system software.
E. Gemini software developers should adhere to a standard method for the reporting and recording of errors from both internal and external sources.
F. Gemini software should be developed in evolutionary fashion, using the CVS version control system.
G. All Gemini subsystem packages should include as part of the software both a simulator module for inclusion in the virtual telescope (see Design constraints, below), and user interface modules for the user interface environments that the subsystem will be operating in. The interfaces required of these user interface modules are described in Section 3.3 on page 3-6.
H. All Gemini software is to be fully documented, internally with appropriate comments, and external documentation. External documentation must include Unix-style man pages.
I. All Gemini subsystem packages must provide modules for the testing and diagnosis of the subsystem.
J. All instrumentation control software must provide full access to all instrument functionality. It is likely that different user interface modules (see above) would present different portions of this functionality to the user. The information required of each interface module is found in the Functional Requirements specifications for each instrument.
K. All Gemini software must be version labeled, both in source and binary form. The version information is to be retrievable from executing software via control commands.
2.14.4 Design constraints 
A. There are different requirements for software running on different layers. For example, strict real-time control is restricted to the IOC layer.
B. Also, the use of a virtual-telescope model in the Gemini system means that the integrated system can be tested and developed independently of the target hardware. This is useful not only in the use of the telescope simulator during science planning, but in maintenance and testing as well. Therefore all hardware subsystems must provide a software simulation module (as stated earlier) that responds in reasonable fashion to commands directed at that hardware. This simulation may require a standard environment, such as VxWorks, EPICS, and VME crate/cpu, but it cannot require any hardware specific to the application.
C. Gemini subsystem should be as self-contained and autonomous as possible, thereby decreasing the functional width of the interface to the rest of the Gemini system.
D. No subsystem package should make any assumptions about the surrounding environment beyond that provided in the interface specifications.


3. General Requirements
3.1 Data Specifications 
The final purpose of the Gemini 8m Telescopes software is the acquisition of astronomical data in digital form in the most efficient way.
To achieve this, many other data concerning the telescope and instruments (parameters) and control commands will have to be exchanged between different processing units in order to setup and control telescope and instruments. Additionally, video and voice data are also necessary (for example, field monitors).
3.1.1 Control Information Flow
Control information must be transferred, typically in the form of commands and replies from users, to telescope and instruments. Replies might contain status information and, in general, data concerning instruments and telescopes, to be stored together with the astronomical data.
Control information on all controlled variables must be provided by all subsystems on request. No request for information shall produce a delay of control activities or locking, even if the corresponding equipment is not available or faulty.
Delay times for the exchange of control information must stay within precise time limits to be defined in “General Description” in Chapter 2. One can afford to retransmit commands in case of transmission error or collision, but the protocol has to be predictable in that commands cannot get lost and replies have to come back reliably.
In a number of cases, synchronization with the Time Reference System at the Gemini 8m Telescopes site is also necessary.
Access to control parameters, telescope and instrument information for monitoring or other use makes a significant contribution to the control flow, and may be logged at quite high rates for short periods (i.e. up to 200 Hz for some information).
It is explicitly required that all such information is available to the Gemini 8m Telescopes software and is capable of being available to all users of the Gemini 8m Telescopes, subject only to restrictions with respect to updating. It must also be possible to restrict user access to such information.
In particular also, the meteorological information coming from a weather station should be available centrally.
3.1.2 Astronomical Data Flow
3.1.2.1 Data Flow
Detector data must be acquired and stored in the most effective way technology will allow; effectiveness should be evaluated in terms of cost, space requirements, longevity, and speed. This shall lead to the definition of a Gemini 8m Telescopes standard, used on all instruments. In general, operational overheads must be kept as low as possible, to maximize actual observing times.
Intermediate storage of raw data in memory on different nodes and in different formats should be kept to a minimum. However, there must be at least two copies - one to secure data as acquired and one to do assessment of data quality on-line (this last copy preferably on removable media).
The link chosen to transfer data should represent as small a bottleneck as possible for data acquisition.
3.1.2.2 Format of Data Acquisition
Normally, raw data will be acquired and stored as such for quick look evaluations. There might, however, be cases (for example, infrared detectors) where fast preprocessing is needed and where, therefore, raw data will not be stored as such, but in a preprocessed format.
3.1.2.3 Transport Data Format                                                                                                                                           
Astronomical data will have to be transported between GEMINI and the home institutes of visiting astronomers in FITS format (as defined by NOST 100-1.0, “Definition of the Flexible Image Transport System (FITS)”, NASA Science Office of Standards and Technology).
TV data concerning site monitoring and voice need to be capable of being available at all operations facilities. It will be a question of interfacing and bandwidth costs whether such information is actually available at a specific location. It is not a requirement that point to point video be available between Gemini 8m Telescopes operations facilities. It is a requirement that voice connectivity, perhaps point to point, be available on a permanent connection.
Other astronomical information such as that coming from sky field monitors, autoguider cameras and sky monitoring devices such as cloud and seeing monitors shall also be capable of being available.

3.2 Operation
3.2.1 Operation levels
Operation of telescope, instruments and subsystems can be carried out at three different levels. There will be parameters associated with each level of operation which define the status of the system and / or control the system. The specific access by different types of users to particular parameters of the different levels are given in Section 2.5.8 on page 2- 5.
3.2.1.1 Observing level
This is the normal operational mode. It allows a certain number of embedded tests, normally at a fairly high level. Monitoring is also done at this level.
It is anticipated that all user categories have access to this level.
3.2.1.2 Maintenance level
This allows maintenance tables (for example, with instrument parameters) to be updated.
It is anticipated that the majority of parameters at this level will be accessed by operations and development staff.
3.2.1.3 Test Level
This allows the installation and testing of new packages or new releases. Any low level test can be performed in this mode.
It shall be possible to update all non-protected parameter values, i.e. those not used by operations at observing level.
Access to this level will be extremely limited.
3.2.2 privilege and protection levels
Privileges and protections are also important parameters to define user operations.
3.2.2.1 Privileges
A further subdivision within the levels can be achieved by implementing privileges associated with categories of users or with the location of the user station (local or remote). For example some users might only be allowed monitoring, as a subsystem is in use by someone else.
3.2.2.2 Protections
Protections must also be enforced (see also Security in Section 3.5.6 on page 3- 20) among users and the operational software should indicate clearly to users the current operation level and check the compatibility between subsystems in different modes.
3.2.3 Capacity
The capacity of the system can be expressed in terms of nodes, which is defined as the number of workstations, or in terms of users, which is defined as the sum total of users at all the nodes. The capacity requirements will be expressed in terms of nodes.
Each node will have the capability to run at all operation levels.
When the Gemini 8m Telescopes telescope is used in its normal observing mode, there will be a single operator node for the telescope and two data acquisition and instrument control nodes.
Some tests might be run in parallel on instruments that do not have the light beam at that moment, so in principle additional nodes might be working at the same time. The system will provide for one auxiliary data acquisition and instrument control nodes.
In addition, the system must support off-site observing modes. The system will provide for a single off-site data acquisition and instrument control node - to be located at either the Gemini 8m Telescopes Site Support or Base Facility.
One supervisor will monitor the system, and other users might need to monitor the running of observing programs, locally or remotely. The system will provide for a single local monitoring node and a single remote monitoring node.
As a conclusion, the Gemini 8m Telescopes control software shall allow simultaneous operation of up to six active control nodes and up to two more monitoring nodes (one local and one remote) without appreciable degradation of performance.
In practice the operation and facilities foreseen so far for the Gemini 8m Telescopes will limit this number to a maximum in the order of three active nodes, but the Gemini 8m Telescopes computers and software shall be capable of coping with the load of 10 active nodes, should the case arise.
3.2.4 Performance criteria
This section is intentionally kept at the level of performance criteria rather than response times (found in Section 2.11.2 on page 2- 22). Every command must be acknowledged in a positive or negative way before the occurrence of the corresponding action within given response times.
3.2.5 Procedures
There must be automatic procedures to implement startup and shutdown of the telescope and instruments. These must allow startup and shutdown of instruments independently of the telescope and without affecting the telescope operation.
Reconfiguration procedures must exist, to change the observing environment.
The definition of the observing environments must be dynamic, i.e. feasible during operations without the need to restart everything. The same applies to the related light path.
Operations staff have privileges to change the environment, meaning selecting a suitable combination of instruments.
The operational software should know which subsystems are installed and operational at any given time.

3.3 External Interface Requirements 
3.3.1. User Interfaces (UIF)
The user interface defines the way users see the Gemini 8m Telescopes system. Given the large number of instruments, there can be many different stations which are active at the same time. It is essential for operational and maintenance reasons that, in spite of the obvious differences of the setups and commands available, the same philosophy is applied throughout. This calls for a homogeneous user interface, which can be achieved only by applying the same user interface tools to the whole project, providing the Gemini 8m Telescopes user interface's ‘look and feel’.
The user interface should not be seen as a package linked to a specific computer. Given the requirement to be able to access the Gemini 8m Telescopes from several points, the user interface should rather be seen as a package to be callable from a large number of stations, depending on where a user is. It should also be network transparent so that it does not matter where it is being run.
The user interface tools shall be based on standards, defined in Section 4.2.5 on page 4- 7, which will be portable across different computer hardware platforms (Portable User Interface Toolkit). The intent of a portability requirement is to facilitate migrating existing and future Gemini systems to different hardware as the need arises. It is the current intent to limit the selection of computer hardware platforms to as few as is practical.
3.3.2 Hardware interfaces
Main processor computer hardware requirements will be defined in the Hardware constraints (see Section 3.4.2 on page 3- 12).
This section deals instead with external hardware interfaces, namely the ones from the microprocessors to the control electronics. The definition of these terms is as follows:
  main processors - these are the computers with which the user interacts 
  control electronics - these are the computers controlling the instruments
  microprocessors - these are computers embedded in the instrument (for instance a DSP or transputer required for array control functions, or special purpose controllers for the primary mirror support actuators).
Standard interfaces to the control electronics shall be available, in the form of:
  standard bus systems
  a standard set of interface cards to be used on all the subsystems and instruments 
  a standard software skeleton running on the control electronics
The existence of hardware standards is clearly essential for maintenance and repairs. It is also essential to avoid software duplication, and to simplify the Gemini 8m Telescopes software. Microprocessor software in particular tends to contain hardware specific software, though one should try to keep it as hardware independent as possible, isolating different software layers.
The standard software must be adequate for the real-time requirements and must offer drivers to the standard electronics to be used on all the Gemini 8m Telescopes software subsystems and instruments.
Links between electronics interfaces and main processors must meet the requirements imposed by the data specifications (see Section 3.1 on page 3- 1).
3.3.3 Software interfaces
The Gemini 8m Telescopes software covers all aspects of control and data acquisition related to the telescope, instruments, and auxiliary instrumentation.
It also covers all the operational aspects of the Gemini 8m Telescopes, including on-line scheduling and rescheduling.
There is also software which, although it will be interfaced to the Gemini 8m Telescopes, is referred to as external. The external software consists of:
  commercial software integrated into the Gemini 8m Telescopes software (e.g. DBMS) •preexisting software used in the Gemini 8m Telescopes (e.g. image processing systems,
star catalogues)
  software associated with visitor instrumentation
  embedded software dedicated to hardware control, but not communicating on-line with the other Gemini 8m Telescopes software (in general this would be microprocessor code)
The Gemini 8m Telescopes software must interface to the external software and clearly the interfaces are fully part of the Gemini 8m Telescopes software.
3.3.3.1 On-line Image Processing Interfaces
In order to make efficient use of the telescope, to support different observing modes, and to support the versatility requirements, some form of on-line image (or pixel) quick-look analysis is required. The following statements are proposed:
“It shall be possible to monitor the quality (image quality, spectral resolution, signal to noise, etc.) of the astronomical data as it comes in.
Standard reduction procedures should be available for basic on-line calibrations of the observed data. Ultimately, one would like to have fully reduced and calibrated data at the end of the observations. Advanced pipeline procedures might make this feasible, at least for observations of a standard nature.”
The above statements define the goal of quick-look analysis for the Gemini 8m Telescopes.
Quick-look data processing should be provided on the Gemini 8m Telescopes, with procedures suitable for fast on-line data preprocessing. A prerequisite for this is that acquired data are made available as directly as possible in a common format, and that all additional data related to an exposure and logging information are made available on-line at the same time.
Quick-look should be usable within exposure sequences to provide results and feedback parameters to the control software in a programmed way, without the need for manual intervention. This document does not try to be specific about the requirements for Quick-look other than that it should be synchronous.
Near-line processing should be available for simple data reductions required for data integrity validation (i.e. remove instrument and observatory effects so the observer can make decisions about further observing actions). This data reduction proceeds sequentially through requests, but asynchronously from data acquistion. In particular, data acquisition takes precedence over near-line data reduction.
Off-line pixel processing for full data reduction should also exist at the Gemini 8m Telescopes site, but does not have any interface to the Gemini 8m Telescopes software. The Astronomical communities have made considerable investments in image processing software, and therefore, compatibility with and adaptations to these packages must be sought.
It should also be noted that some Gemini 8m Telescopes subsystems, such as adaptive optics, may require their own special on-line pixel processing software, which is better defined in the requirements for those subsystems. This is largely due to the difficulty of applying on-line the same algorithms used for full off-line reductions — in general due to the time critical nature of the image processing needs.
The same situation might also occur with other instruments, where specific observer support software has to be foreseen for on-line use.
In all these cases the specific on-line (quick-look) software development shall be seen as a subset of the development for the off-line data reduction system, to avoid as far as possible duplication of development effort.
3.3.3.2 On-line Access to Catalogues and Previous Data
The output format of the Gemini 8m Telescopes data must be compatible with the GEMINI archive requirements.
As comparisons with previous data might be of great value and affect the actual observing program, on-line interactive access to the data archiving system should exist, so that access to this database is possible for Gemini 8m Telescopes users.
The specific types of data available; flat fields, calibrations, science exposures, etc.; the amount of a specific exposure available; header only, averaged exposure, complete raw data set; and the time frame within which such data will be made available; same night, weekly, after proprietary period; will be established by the Gemini Archiving Requirements.
Computer access to star catalogues is also required, so that an automatic selection of candidate guide and standard stars can be made.
3.3.3.3 Access to Other Packages
The Gemini 8m Telescopes software must be able to interface with all commercial software packages available on the Gemini 8m Telescopes and integrated into the Gemini 8m Telescopes operation.
A relevant example of such a package is a general database management system (DBMS), where operational information such as schedules, logs, problem reports and maintenance information related to various pieces of equipment should be kept.
3.3.4 Communication interfaces 
Being in itself a distributed telescope system and having a large number of instruments, the Gemini 8m Telescopes system has internal communication needs.
3.3.4.1 Local Area Network (LAN)
The LAN shall support the majority of the Gemini 8m Telescopes system internal communication needs. This LAN must be capable of dealing both with the data bandwidths required (at peak and on average) and with the required response times and synchronization needs. This LAN shall be supplemented with a Local Time Bus, for distribution of absolute and relative time signals, and both a digital reflective memory bus and an analog event-based bus, for distribution of signals with requirements not satisfied by a LAN.
Independently of the physical layout of such a network, its functional requirements can be split into several categories:
  Local coordination and synchronization needs within a subsystem (for example, coordination of active support system for primary mirror, bi-directional traffic of commands/replies). This layer could be considered as internal to a given subsystem or instrument, but as more than one subsystem might need it, one should aim for a unique solution at the hardware and software level.
  Global synchronization needs, such as the universal time synchronization requirement. The required accuracy will be defined in Section 2.9 on page 2- 19.
  Exchange of control information, in the form of commands and status information. (Bi-directional traffic) (see also Section 3.1.1 on page 3- 1).
  Collection and transfer (for archiving or remote access) of raw astronomical data. The capacity will be defined in Section 2.9 on page 2- 19(see also Section 3.1.2 on page 3- 2).
  Access from Wide Area Network (WAN) for remote diagnostics and monitoring from operations facilities (Bi-directional traffic).
No distinction is made here between WAN and point to point links as there shall be no difference in the software between the two cases. However the system architecture will be designed so as to minimize the communication load placed on peer and higher level networks.
Control data and astronomical data have already been defined in the Data specifications (see Section 3.1 on page 3- 1). The reason for repeating them here is to have a complete view of the required network functionality.
To eliminate conceptual access problems, while coping with different bandwidths, LAN and WAN interfaces shall be homogeneous and shall be based on standards which allow migration on different media, should they become required during the Gemini 8m Telescopes project life.
For maintenance reasons and hardware independence, a clear hierarchical model must be implemented, supporting separation of logical and physical layers, e.g. ISO/OSI model. It is recognized that this hierarchy may need to be violated for (in general) performance reasons. This results in point-to-point connections between peer systems or direct connections bypassing the hierarchy.
Network redundancy should also be considered in the design phase as a way to increase reliability and security, in particular for control information.
Due to the uncertain future of the Internet, only non-essential tasks may employ it. All essential tasks, not including remote observing, must take place on resources controlled by the project (such as leased lines).
Violation of the hierarchical nature of the system can lead to testing and maintenance problems. The use of these features must be limited and constrained by the following guidelines:
  1. Peer-to-peer connectivity should only be used to overcome a demonstrated performance problem.
  2. Bypassing the hierarchy (connected between grandmother and granddaughter with no path through the mother) should only be used for transmission of status information or bulk data, not control flow.

3.4 General Constraints
3.4.1 User Constraints 
It is envisaged that observing astronomers who have travelled to the Gemini 8m Telescopes site will make use of the Gemini 8m Telescopes control room facilities. This will allow centralized support and coordination of their operations, providing both operations support for individual instruments and supervision for all of them.
However, even at the Gemini 8m Telescopes site there will be users (e.g. software development and maintenance staff) installing or enhancing other parts of the system, possibly working directly at the telescope.
Finally, in the case of remote operations, other users (e.g. support staff) might be on Cerro Tololo or in Hilo.
To allow coordination both locally at the Gemini 8m Telescopes site between the various users and with remote users, the software shall support access to the system from any user station. It will then be an operational decision, implying privileges and priorities for the various categories of users, and definition of what a given user can actually do.
Access from any user station will make user stations in principle identical and software configurable as the user station of this or that subsystem. This should greatly simplify the coordination problem posed by the large number of simultaneous users (as already described in the Capacity requirements, Section 3.2.2).
3.4.2 Hardware constraints 
There are a number of constraints for the Gemini 8m Telescopes computer hardware. Although some of these constraints may appear redundant the project recognizes that:
  during the next 5 to 10 years new hardware will be available with features and costs that could benefit the project
  the hardware chosen as the standard at this point of time may be no longer available at some point in the future
  the cost of maintaining an existing hardware standard, even if available, may exceed the costs of adopting a new hardware standard
These constraints recognize that the majority of the expense in changing hardware standards is the cost of the software. Particular constraints are:
A. Computers used at the Gemini 8m Telescopes site, particularly in the test phase when they are outside the control room and near the subsystem under test, shall be checked against altitude and humidity specifications for the Gemini 8m Telescopes site (see also [EDS] in Section 1.3).
B. Computer hardware must be able to run the Gemini 8m Telescopes software environment (operating systems, Gemini 8m Telescopes software) and provide compatibility in data format (identical internal data representation).
C. Common development and implementation tools must be both available and supported
D. Identical network access must be supported
E. Local processing power must be such that telescope and instrument control does not represent a significant overhead in the whole process of executing an observing program (the overhead, if any, should be limited by the time it takes for physical devices to act)
F. The choice of a scalable hardware architecture with computers at various performance levels should solve the problem of adequate on-line data assessment, as the amount of this activity is very variable and dependent upon the kind of detector and method used.
G. Due to the limited bandwidths which may be available remotely, there will be constraints on the functionality of remote operations and access.
Depending on funding, it is probably reasonable here to make a minimum and a desirable specification. The minimum situation could also coincide with what is needed in the test period before coming to full remote operation.
In any case, remote operation must include remote monitoring from the Gemini 8m Telescopes base facilities, together with access tools for diagnostic and test use. It should be a goal to support remote observing from the Gemini 8m Telescopes base facilities.
3.4.3 Software constraints
Some of the general requirements which have a direct effect on the software are here explicitly transformed into software constraints.
These are:
A. Individual instruments must be able to run fully independently.
B. Telescope software at the two telescopes must be maintained to be identical in the upper layers (even if hardware should differ).
C. Additions of new instruments should aim, as a goal, at introducing no modification to already operational parts. Modifications should be confined to the operational procedures and should not affect the bulk of the existing software.
D. Switching to different configurations must be possible at any time with appropriate procedures.
E. There must be easy procedures to reconfigure the system when subsystems are modified or removed.
F. The number of main packages of software must be kept to a minimum to facilitate maintenance, but compatibly with the need to have the right degree of modularity.
G. Commercial and public domain packages should be used whenever possible. H.Existing software packages should be reused wherever possible.
I. Existing software expertise should be consulted whenever possible.
J. All software which does not directly control specific hardware must be written as machine independent, portable code. Even for microprocessor software, the software should be hardware independent, to allow a later choice of the target microprocessors.
K. To allow for expansion and maintenance, Gemini 8m Telescopes standards must be defined for the on-line software and the development environment.
L. On-line version control must be implemented. That is, the version control system must be available to recover/restore versions at all times.
M. At boot time, the Gemini 8m Telescopes software shall check the consistency of versions of all the various software components.
N. Table-driven software should be used whenever possible, to avoid unnecessary compilations.
Whether the software is table driven, message driven, or a combination of both is a function of the individual work packages and defined in the appropriate work package description.
Changing system constants, such as arcseconds/bit for an encoder, shall not require recompiling but will be updated as part of system startup, and, for some constants, will be modifiable during operation. System status parameters will be maintained to an extent that will allow restarting the system and regaining the previous state. The extent of duplication of the previous state will be dictated by safety and practical considerations.
Strict checking should be applied on this to preserve maintainability and reconfiguration of the system.

3.5 Attributes
Regardless of application, the software and control systems produced as part of the Gemini Project Work Packages exhibit numerous common attributes. The specific attributes described in this document are:
• Simplicity
• Supportability
• Reliability and Availability • Maintainability
• Human Engineering
• Security and Safety
• Environmental Compatibility • Testability
• Expandability 
• Modularity
• Concurrency
3.5.1 Simplicity 
I think you should include Rick’s information about complexity criteria here, so show that we are aiming to achieve as simple as system as we can which meets the requirements. — Steven.
3.5.2 Supportability 
A supportability plan will be part of the Gemini Control System. The goals and issues to be addressed by this plan and the elements of the plan are detailed below. The plan is TBD.
3.5.2.1 Goals
  have supportability influence design
  translate availability and readiness requirements into supportability requirements 
  identify and plan for necessary support
  provide support at minimum cost
3.5.2.2 Issues
  maintenance personnel availability and work hour constraints 
  personnel skill level constraints
  operating and support cost constraints
  target failures correctable at each maintenance level
  allowable downtime at site
  turnaround time to fix and maintain system 
  standardization requirements
3.5.2.3 Events
  maintenance planning
  manpower and personnel
  supply support
  support equipment
  technical data
  training and training support
  computer resources support
  facilities
  packaging, handling, storage and transportation 
  design interface
3.5.3 Reliability and Availability 
A reliability program is part of the Gemini Control System. The requirements for this program and some measures of reliability are detailed below. The plan is as provided by Glen Heriot of the Canadian Gemini Project Office.
3.5.3.1 Reliability and Availability Requirements 
Reliability is defined as “The duration or probability of failure-free performance under state conditions” or “The probability that an item can perform its intended function for a specified interval under stated conditions”. The [GSR] sets as a requirement 2% and a goal 1% for total system (mechanical, electrical, and software) downtime due to failures - this translates to a maximum of 15 minutes per night or 1 night per month of downtime. This in turn sets quite stringent requirements on both MTBF and MTTR for the software and controls.
To guarantee maximum availability of the control system, retry procedures must be embodied in the software in case of error or failure (e.g. time-out, hardware failure) to achieve recovery on-line whenever possible.
Should recovery also fail, the error or failure has to be reported in a clear form (to identify the cause of the problem) and the system shall put itself into a safe state, whenever a safety aspect might be involved.
To avoid unnecessary downtime, it must be possible for the system to reconfigure itself in order to continue observing, in a different mode if required, given the failure of a single non-critical subsystem.
To increase software robustness, range checking and validity checking shall be supported before execution of any input command. This must be possible ahead of time, preparing observing sequences for automatic observations and simulating observations to estimate results.
On-line pre-checking of the operational status of equipment should be done prior to sending critical or time consuming commands. It must be possible to apply continuous monitoring to all subsystems on request, both when in operation and when idle, to check their operational status.
A measure of fault rates should be done during commissioning to establish baseline rates for system reliability monitoring.
There are to be recovery procedures to restart after error failure.
The system should be constantly monitoring active subsystems to be sure they are operating correctly before sending command to each subsystem. This monitoring should continue on inactive subsystems.
The goal for recover and/or reconfiguration is 5 minutes from onset of the error condition to observing again.
Specific requirements are: 
A. measurable, realistic reliability needs
B. performance criteria for the system 
C. definition of failure
D. conditions of use and environments 
E. means of verification
F. period of time during system life
3.5.4 Maintainability
A detailed plan for maintaining and periodically upgrading the Control System over its lifetime will be part of the Gemini Control System. The plan will consider:
A. Maintenance requirements including an estimate of required resources.
B. The method of upgrading the system to add capabilities and performance. Areas where upgrades are anticipated should be identified with an estimate of the required effort and resources.
These issues will be addressed in the context of the mountain environment where the system will be operating. The plan will be delivered with the control system.
3.5.4.1 Maintenance Requirements 
Maintenance of commercial software (Solaris, VxWorks) used by this work package is the responsibility of the WPR and the maintenance costs are not covered by the work package budget.
Community software support (EPICS) is available nominally free-of-charge through the normal release and bug-fix procedures used in the community.
All subsystem software is to include modules to aid in the maintenance and testing of the subsystem. For example, each subsystem is to include a simulator that provides a reference behavior for that subsystem. Simple mechanisms should exist for replacing a subsystem with its simulation.
The following self-check levels are to be supplied with subsystem software:
A. Monitor level. Each subsystem should have a background task running whenever that subsystem is operational, performing such tasks as checking power supply levels, temperatures, performance, correct responses to commands. The OCS is to be notified of any detected problems.
B. Self-test level. Each subsystem should provide a module for fully exercising all subsystem components, both hardware and software. This module is executed automatically during start-up and on demand through the defined interface. Problems are to be automatically reported to the OCS via the defined interface.
C. System level. There are also software modules for testing the subsystem as an integrated portion of the entire system. This software would be executed on demand during maintenance operation level.
3.5.4.2 Levels of Maintenance
The levels at which maintenance may be performed are:
3.5.4.2.1 Organizational Level 
These should be done in situ during an observing session.
  repair by unit replacement (for instance, an extra computer system)
  repair units by module replacement (e.g. replace a VME card in an IOC)
3.5.4.2.2 Intermediate Level
This could be done at an Gemini 8m Telescopes base facility during the day.
• repair by module replacement
3.5.4.2.3 Depot Level
This could be done at an Gemini 8m Telescopes base facility during the day. 
  module repair
3.5.4.2.4 Contractor 
Done at the contractor/vendor’s site. 
  repair or replace
3.5.4.3 Maintenance Goals 
The prime objectives are to minimize:
A. downtime due to maintenance
B. cost of maintenance
C. numbers and skill levels of personnel 
D. efforts to perform maintenance 
E. errors in maintaining systems 
F. failures induced in maintenance
3.5.4.4 Maintenance Issues
A.maintenance worker constraints 
B.levels of maintenance 
C.sparing plans
D.periodic testing
E.scheduled or preventative maintenance 
F.planned support equipment 
G.turnaround time
H.repair versus discard
3.5.4.5 Maintenance Constraints 
A. operating hours 
B. downtime or availability
C. attended / unattended operation 
D. environment
3.5.4.6 Quantitative Maintenance Requirements
Quantitative maintenance requirements will be allocated to the system, subsystems, and each component. The requirements must be achievable and stated in such a way that verification is permitted. The requirements will be expressed as:
A. Mean Time to Repair for each maintenance level 
B. Maximum Time to Repair for each maintenance level 
C. Preventative Maintenance hours per year
All equipment shall support a programmed adjustment and maintenance interval of 30 days or longer.
3.5.5 Human Engineering 
All Gemini Software must be designed with human engineering requirements under consideration. The human engineering requirements for Gemini Software include:
A. provisions for minimizing stress effects and fatigue B.feedback on operation on specific tasks
C. people and machine interfaces
D. procedures
E. training and experience
F. interaction with team members G.management and organizational behavior
3.5.6 Security and Safety 
The Gemini Control System development effort will obey and abide by both the letter and the spirit of all applicable engineering practices, laws, regulations, and policies. All necessary safety approvals will be obtained before devices will be accepted. The safety precedents and requirements are detailed below.
3.5.6.1 Definition of Safety and Risk
MIL-STD-822B, System Safety Program Requirements, defines safety and risk as: Safety: Freedom from those conditions that can cause death, injury, occupational illness,
or damage to or loss of equipment or property
Risk: An expression of the possibility of a mishap in terms of hazard severity and hazard probability
In addition the Gemini project defines a hazard as:
Hazard: Something that could cause death, injury, illness, or damage/loss.
3.5.6.2 Security and Safety Requirements 
The Gemini system must be self-monitoring to invoke safety monitoring to prevent risk to people or damage to equipment. The software should be able to quickly bring the Gemini system to a safe state upon notification of such danger. Subsystems must be able to detect such danger and report it appropriately. In the event that the risk persists, subsystems must be able to move themselves into safe states to protect people and equipment (i.e. if there is a failure in the higher-level systems).
Safety protection must be applied whenever there is the risk that the actions of the control software could endanger people or cause damage to any Gemini 8m Telescopes subsystem, for example, by driving beyond limits or by overexposing detectors. This protection, where implemented, must be independent of the software. In general this will require mechanical hard stops, electrical interlocks, electrical hard limit switches, soft limit switches, software limits, and watch dogs,.
The order in which these systems will work is as follows:
1. software limits - the software will not allow unsafe actions; the command will be rejected
2. soft limit switches - the software will detect unsafe areas and halt; the software will allow movement off of soft limits
3. software watch dogs - the software will halt if its watch dog has not been reset
4. hardware watch dogs - the system will halt if its watch dog has not been reset
5. hard limit switches - these switches will remove power from actuator when beyond soft limits; the software/electrical systems will allow movement off of hard limits
6. hardware interlocks - these will prevent both software and hardware from action - there will be no bypass of these systems
7. hard stops - the mechanism cannot move beyond this point due to mechanical limit(s). In general hard stops will use dampers to avoid damage to equiment.
                                                                                                                                                           
The Gemini 8m Telescopes software shall be able to bring the Gemini 8m Telescopes system quickly to a safe state upon detection of danger. Safety aspects shall be analyzed during the functional specification phase of the software.
Security must be provided in order to both prevent accidental mix-up of commands from different users on different parts of the system and to prevent intrusion from the wide area network into the Gemini 8m Telescopes. In particular, the astronomical database must be protected from intrusion, whether the purpose is to access private data or to be destructive. It is acceptable, and may well prove to be the best solution, to provide intrusion security by a well designed network gateway acting as a firewall.
A system that is operating in Engineering/Maintenance mode must ignore directives from other systems, though status information should still be provided for use by other systems.
There should be security preventing the intrusion into the system by unauthorized users, or users at unauthorized access levels.
All systems are appropriately interlocked. This interlock must not depend on any software for reliable operation. Details of the interlock system are found in the Mount Control System Work Package Definition.
The interlock philosophy is as follows:
  All hazards capable of causing death and/or loss of irreplacable equipment shall be passively interlocked.
  All hazards capable of causing injury and/or severe damage to equipment shall be actively interlocked (severe damage implies that repairs are not repairable at the depot level.
  All other hazards may be interlocked via software.
The precedence for conforming to safety requirements will be:
1. design for minimum risk
2. incorporate safety devices
3. provide warning devices
4. develop procedures and training
The general safety requirements are:
A. eliminate hazards through design, including material selection 
B. isolate hazardous substances from people
C. minimize hazard to people during operation and maintenance from high voltage, electromagnetic radiation, sharp edges, hot surfaces, chemicals, etc.
D. minimize risks due to environmental conditions, such as temperature, noise, vibration, etc.
E. minimize risks created by human error
F. use interlocks and other protective devices when hazards cannot be eliminated G.provide distinctive markings and warnings to protect people
3.5.7 Testability 
A Controls Test Plan is part of the Gemini Control System. This plan will address all areas of testing from design, acceptance, commissioning through to hand-over. The objectives and requirements of this plan are detailed below.
MIL-STD-1309C, Definitions of terms for Test, Measurement and Diagnostic Equipment, has these definitions:
Testability: A design characteristic which allows the status of a unit to be confidently determined in a timely fashion.
Built-in-test: An integral capability of the mission equipment which provides an onboard, automated test capability to detect, diagnose, or isolate system failures. The fault detection and, possibly, isolation capability is used for periodic or continuous monitoring of a system’s operational health, and for observation and, possibly, diagnosis as a prelude to maintenance action.
3.5.7 Testability Objectives 
The major objectives are:
  test effectively with minimum effort and cost
  reduce maintenance induced problems
  reduce the cost of test equipment and programming • reduce cost of documentation
  testability requirements

The interpretation of this table is that we should discover the failure of a subsystem 90% of the time before the failure impacts observing.
3.5.8 Expandability
Since the Gemini software will be developed in stages over a period of years, and since computer technology is expected to evolve rapidly over this same period, the software is to be designed to be easily extended and upgraded with modifications to non-changing components. The software itself, its installation process, and its documentation must be developed with this expandability in mind, using general industry standards.
3.5.9 Modularity
All software is to be developed using typical modularization and standardization techniques. In particular, each module’s environment is strictly defined by its interface to other components. No module can rely upon information outside of this interface. Module selection should be done in logical fashion to minimize the size of the interfaces between modules.
The on-line databases can be considered part of this interface, but are only accessible through their defined interfaces.
The software must be strictly modular, i.e. the functionality of a subsystem should correspond to that which belongs to that subsystem and only to that, so that software for different subsystems can be installed and maintained independently of all the rest.
This is needed in particular for multi-instrument operation, for example, as instruments share the same subsystems on the telescope.
At the same time, the possibility must exist to acquire information about other parts of the system (for example, telescope coordinates) (as mentioned in the control flow requirements in Section 3.1.1).
It also important that there are no undesired interactions between subsystems. This may be enforced either at the client/server interface or at the message system level.
3.5.10 Contingencies 
A. Fault tolerance. The security and safety of the system should be guaranteed even in the event of failure of any component, including the higher-level software.
B. Redundancy. Hardware redundancy is a not requirement of the Gemini systems. However, the ability to reconfigure the software if one actuator fails is desirable. Data redundancy is also a requirement, to prevent a single failure from causing the loss of collected data. The goal is to minimize the effects of single-point errors throughout the system.
3.5.11 Concurrency
As much as possible, the system is to take advantage of parallel operation to improve efficiency. The Telescope Control System should be capable of detecting and invoking parallel operation as it is responsible for control of all of the telescope and enclosure subsystems.

3.6 Life Cycle Aspects 
The Gemini 8m Telescopes software has to be developed according to a structured and formally defined development model. The purpose of this is to:
  make the development process visible (for quality and maintenance reasons)
  avoid incomplete specifications
  discover errors early (via review and audit procedures)
  secure structured, maintainable software
  guarantee software quality
  improve and ease cooperation.
This has to be defined in [SMP] and [SCP] (see Applicable Documents, Section 1.3), which will cover:
• Development methods
• Formal approval, review and audit procedures
• Documentation
• Coding and debugging
• Simulation
• Component and integration-verification and testing 
• Configuration and version management.

3.7 Development Environment 
The development environment for the Gemini 8m Telescopes software consists of the computer hardware and system software (operating system, languages and tools) chosen optimally to support the development model presented in the previous section on life-cycle aspects.
The choice of such an environment has to be defined, together with the choice of all the Gemini 8m Telescopes standards, but excluding the target computer hardware, in Section 4.2.5 on page 4- 7.
The following criteria for later selection shall be kept in mind:
• Emphasis on development and productivity requirements, including cross support tools
• Portability of software (target hardware independence) •Hardware and vendor independence
• Use of industrial and defacto standards.

3.8 Installation Aspects 
Test procedure methods have to be defined in the Software Test Plan (STP), while test plans shall be written for all individual software packages and modules comprising the Gemini 8m Telescopes software.
Apart from the component and integration test procedures, a formal release system should exist at package and module level, which should be checkable on-line by the operational procedures for consistency. Every system must thus be able to supply its current version upon request.
The test operation level has already been discussed in Section 3.2.1 on page 3- 3.
                                                                                                                          
The phasing of the various parts of the project is given in the [SMP].
                                                                        


4. Specific Requirements 

 This section presents the specific attributes and requirements for Gemini software.
Only the high-level requirements for Gemini software are presented here. Detailed specifications for the subsystems are found in the individual chapters of the Software Design Description.
4.1 Attributes
Regardless of application, the Gemini software exhibits numerous common attributes. These attributes are described in this section.
4.1.1 Maintenance
The Gemini system maintenance philosophy is described in the Software Management Plan (SMP).
Preventative maintenance is scheduled as specified in the Gemini Design Requirements Specification.
4.1.2 Modularity
All software is to be developed using typical modularization and standardization techniques. In particular, each module's environment is strictly defined by its interface to other components. No module can rely upon information outside of this interface. Module selection should be done in logical fashion to minimize the size of the interfaces between modules.
The on-line databases can be considered part of this interface, but are only accessible Reliability and availability
A measure of fault rates should be done during commissioning to establish baseline rates for system reliability monitoring.
There are to be recovery procedures to restart after error failure. See section Section 3.2.5 on page 3 - 5.
During science planning, there should be validity and feasibility checks to help ensure effective and efficient use of the telescope. Where appropriate, these checks should also be performed during operation.
The system should be constantly monitoring active subsystems to be sure they are operating correctly before sending commands to each subsystem. This monitoring should continue on inactive subsystems.

4.2
4.2.1 On-line database subsystems 
All telescope and instrument parameters are kept in an on line database to permit easy implementation of table-driven applications. The interface between software control packages is normally done via interface calls to the on-line database.
The requirements for this database package are:
A. All telescope, instrument, and detector control information is to be available at any operation level.
B. Access times to the database are to be in the range of 2-3 msec per access. C.Asynchronous writes are to be supported, allowing for concurrent operation. D.Time-access critical information is available in memory.
E. There is to be a consistent and logical (i.e. name based) access method. 
F. The database must support both remote access and distributed data.
The internal (within the IOC) implementation of this database is to be based on EPICS. The implementation within the host workstation is TBD.
4.2.2. Communication subsystem
4.2.2.1 Remote Operations 
A fundamental criteria of Gemini telescope operation is that it support a full implementation of remote operations. This includes remote observing, remote control of telescope, enclosure, and instruments, multipoint monitoring, remote monitoring, remote access for testing, development, diagnostics, and maintenance,
It is expected that all operational capability found in on site operations is extended to remote operations, with some degradation in performance resulting from WAN bandwidth considerations. This means the video data signals must be encoded digitally and transferred via the WAN to remote sites.
There must be some form of security to control access to system features, possibly restricting some operations to specific remote sites (e.g. Hale Pohaku or Hilo in Hawaii, Cerro Tololo in Chile, etc.)
4.2.3 Data Specification
The various types of data were presented earlier. This section examines the input, output, and interrelationships of the various data types.
4.2.3.1 Data Framework
Final storage locations for the data types is presented here, along with a description of the different databases that are available.
A. The on-line data store holds astronomical data for the current observation. 
B. Astronomical data are automatically stored onto the Archive medium (external software). 
C. Star catalogs are available in Astronomical object catalogs (external software).
D. Telescope and instrument parameters are distributed in databases across the IOCs for those systems. There is also a central repository maintained by the OCS that holds these databases for down-loading to the IOCs. (developed software)
E. All additional data that is not required on line (configuration information, detailed documentation, operation logs, etc.) are stored in a relational DBMS. (supported software).
4.2.3.2 Data Inputs
Input data are all data that are predefined at operation start. This includes catalogs, calibrations and flat fields available in archives, etc.
Observing commands (whether entered interactively or via the Sequencer) are input data that provide information on the course of operation and trigger events.
4.2.3.3 Data Output
Replies to commands, including status information, updates to parameters, video and astronomical information are considered data outputs.
These data end up in the different databases.
Operational information, such as logging messages, alarms, and errors are special forms of output data, since they are made available for later inspection and debugging.
4.2.3.4 Inter-Function Data Definitions 
One criteria is that sufficient information be recorded during an observation to recreate the sequence of events that occurred during the observation. This requires that all input and output data be logged appropriately.
Given an initial set of configuration parameters, the Gemini system operates via a sequence of commands. This operation is complemented by using previously stored data, calibrations, and star catalogs
                                                                                                                                                                 
4.2.4 System Operated Requirements  
4.2.4.1 Normal Operation
A. Automatic operation. This is the normal mode of operation. The observation is performed through a preplanned program requiring little or no interaction with the observer.
B.Interactive operation. Science planning and program changes are accomplished through interactive operation. Is is possible to enter interactive operation from automatic operation to handle exceptional conditions.
This is the normal mode of operation at maintenance and test levels.
C.Modes and control. Normal operation is possible at all operation levels (observing, maintenance, and test) and applies to the following conditions (where appropriate) on any subsystem:
   Observing
   Stand-by
   Maintenance and testing
D. Performance. Overall performance of the Gemini telescope is defined as the percentage of viewable time during which exposures have been taken (i.e. sum of all exposure times over available time for exposures).
To improve this performance, all possible concurrencies in system operation should be used. Best use of concurrency occurs when using the Sequencer.
E.Start-up and shut-down. There are start-up and shut-down procedures that must exist at many different levels:
  1. Cold start-up, starting the system from scratch (including time to download all software) should take about 5 minutes. This does not include time to start-up the telescope or instruments.
  2. Warm start-up, starting from scratch but also excluding software download time should take about 1 minute.
  3. Telescope start-up, measured from end of cold or warm start-up should be about 4 minutes.
  4. Instrument start-up, measured from end of telescope start-up, should take 2 minutes or less.
There must be a way to shut down all subsystems (hardware and software).
All start-ups and shut-downs are to be automatically logged with time stamps, to allow for statistics on system availability.
F. Logging.
  1. System logging information should include all important events, properly timestamped and indexed. The goal is to be able to recreate the steps in a observation from the system logs.
G. Engineering Logging
  1. It must be possible to log engineering data at up to 200 Hz rates for short periods of
time. This data must be available to external software packages for analysis.
  2. Long-term logging of engineering data must be possible at slower (1 Hz or less) rates, into a common format (baselined as SYBASE).

4.2.4.2 Operation in Failure Mode
A. Fault-tolerance and recovery. See Attributes, Section 4.1 on page 4 - 1.
B. Error logging. All errors should be reported using a common, system-wide procedure.
There are three types of errors:
  - Fatal. Fatal errors occur if there is no acceptable recovery procedure that will allow operation to proceed. Under fatal error conditions, the system falls back to a safe "backup" state requiring human intervention for restart.
  - Serious. Under serious errors, the system does not need to move off-line, but the current operation cannot be completed. Serious errors require human intervention to restart full operation.
  - Warning. All other unexpected conditions result in warnings that are properly logged. The system continues operation, though perhaps with reduced efficiency.
All subsystems must group errors into these categories. In addition, errors that result in an "alarm" should be described, along with the proper action required to acknowledge and eliminate the alarm condition.
Besides the time-stamp, error logging should provide enough information to trace the condition back to its apparent source, both in equipment and in event sequence.
There should be tools available to extract error (and other) logging information by subsystem component, time-sequence, previous events, and so on.
The Gemini Control System formally distinguishes alarms from errors. Errors result from failures to successfully complete commands, while alarms represent asynchronous failures. Note that an error may result in an alarm.
There are two types of alarm conditions. The first are automatically monitored alarms, which exist as long as the errors persist and are then automatically cleared. The second type of alarm require human acknowledgment to clear.
C. Recovery. In addition to start-up procedures, there must be well-defined recovery procedures for any subsystem that has become inoperative.
Command retries must be included in the system for most common timeouts or no-response conditions. These retries should occur automatically in the command handling to avoid unnecessary error conditions.
D. Performance. The performance of error-mode recovery is specific to the subsystem and is defined in the Functional specification for that subsystem.
   Normally, there is no recovery possible from a fatal error except to shut-down and then restart the subsystem. However, in the case of an instrument failure, it may be possible to continue operation by rescheduling to use observations that do not require that particular instrument.
   For serious errors, it may be possible to continue operation with degraded performance. For example, failure of automatic tracking may require manual tracking; other errors may result in operation with a different instrument.
   Under normal conditions, the number of warnings should be small. The system should monitor the rate of warning messages since an increase might indicate that some tuning or maintenance is appropriate. Ideally, such conditions should be noted by the subsystems before reaching the OCS level.
   Failure conditions should not cascade. That is, failure of one subsystem should not affect other, working, subsystems, including communication links.
4.2.5 Standards
Given the size of the Gemini system and its long expected lifetime, it is important that standards are provided for system design and development.
4.2.5.1 Software Standards
4.2.5.1.1 Software methods
All Gemini supported software is to be developed using a formally defined model. The Ward/Mellor approach to developing real-time systems is used and covers:
A. Analysis, design and development methods 
B. Review procedures
C. Documentation 
D. Coding and debugging 
E. Simulation
F. Testing and integration
Functional analysis is done using a CASE tool suitable for use with Ward/Mellor techniques, such as TSEE, by Westmount Technologies.
The design is to use the techniques and diagrams introduced by Ward and Mellor and reviewed by the Gemini staff.
Detailed design and development standards are not specified, but expected to conform to system goals and established practice.
An object-oriented approach is encouraged but not required.
4.2.5.2 Operating systems
The upper levels (User-interface and OCS) are assumed to not require a real-time operating environment. However, the operating environment at these levels is expected to provide sufficient performance for both human interaction and communications.
Real-time support is required at the IOC level.
A. Development system software. The choice for a development environment is based on the following criteria:
   Productivity and development tools
   Software portability and hardware independence 
   Vendor independence
   Industry and de-facto standards
   Support for state-of-the-art user interfaces 
   Support of a distributed environment
Given these criteria, the following recommendations exist.
  1. The development operating system is UNIX System V, Release 4, using only POSIX compliant calls to the operating system. In particular, vendor specific extensions are not permitted. Compliance to POSIX is measured against the book: POSIX Programmer’s Guide - Writing Portable UNIX Programs, by Donald Lewine, O’Reilly & Associates, Inc. 1991.
  2. Any special needs that cannot be acceptably met by the available operating system calls are to be discussed with the GPO on a case-by-case basis.
  3. Some packages (such as GUI interfaces and database interfaces) have higher portability requirements that may require the specification of higher level interfaces to the OS.
  4. The GUI systems are to use X-windows, version 11, release 5 (X11R5) or release 6 (X11R6). The principle language for developing GUIs is Tcl/Tk.
  5. The GNU software tool suite should be used where possible.
  6. Imake is recommended, with GNU’s autoconfigure utility an acceptable alternative.
  7. CVS is the recommended version control system.
  B. IOC and cross-development system software. A number of real-time operating systems were examined for compatibility with the goals for the Gemini Project. At the same time, the availability of cross-support development environments was considered.
The recommendations are:
  1. The IOCs will use the real-time operating system VxWorks (from Wind River Systems).
  2. The communication interface between the IOCs and Unix workstations is to be IMP.
  3. It is assumed that all IOC software is to be developed on Unix workstations in a windowed development environment.
  4. The cross-compiler to be used for IOC software development is one specified by the Gemini Project. It is the GNU cc compiler as furnished with VxWorks.
  5. IOC software development is to be done using a common development environment, as specified in the Software Programming Standards (SPS)
C. Software below the IOC level. There is likely to be software below the IOC level, but it should not require downloading, except possibly for upgrades, typically being placed into ROM or FLASH memory.
Any access to this embedded software while it is connected to the system is strictly through software in the IOC. From outside the IOC this software appears as part of the electronics.
Although this software is not considered part of the Gemini software, it is obviously an advantage (for maintenance purposes) to have it conform to the requirements of Gemini software.
D. Installation system software.. The host workstation operating system is Unix, currently baselined as Solaris 2.3 or above.
The installed target IOC operating system is VxWorks, with EPICS as the interface.
4.2.5.1.3 Languages and coding standards 
Details of these standards can be found in the Software Programming Standards document.
4.2.5.1.4 Software configuration and tools
These are defined in the Gemini Configuration Control Plan.
4.2.5.1.5 Software communication standards
The following recommendations are made:
A. Communication hardware independence is accomplished by using the DARPA
TCP/IP communication protocol over LAN's and the WAN.
B. The communication software must support the standard ARPA services (telnet, FTP,
SMTP, etc) as well as NFS, RPC, IPC, and the Unix socket interface library.
4.2.5.1.6 Software Interfaces 
The recommendations are:
A. The software interface between workstation and IOC is to use DRAMA’s IMP protocol for all control communication, using SDS as the command structure. 
B. Interprocess communication on the host workstations is through the same IMP protocol.
C. Communications between real-time components is to based on the EPICS Channel
Access protocol.
D. Data communications are typically through IMP/SDS.
E. Further details of the software interfaces are found in the Software Design Description.
4.2.5.1.7 External software packages 
A. Off-line Data reduction. The off-line data reduction facility is not considered part of the Gemini software. However, it will be possible to connect such software into the Gemini system if interface routines are developed for connecting to the Gemini system. These interface routines are part of the Gemini software and must conform to the standards given in this document. Packages that might be used for off-line data reduction include ADAM, IRAF, Midas, IDL and Khoros.
B. Quick-look analysis will be through PV-Wave/IDL.
C. Archiving. All astronomical data are saved into the Archiving system. Data storage and transport for astronomical data will be in FITS format. On-line access to the archiver will be through STARCAT.
D. Star catalogs. The catalogs available on the Gemini system are described in TBD, as are software access requirements. Both on-line and off-line access is done according to STARCAT.
4.2.5.1.8 Databases
Astronomical data are stored both in the Archiving system and in the data storage subsystem.
IOC control databases are distributed across the IOC subsystems, with down-loadable initialization copies available on the Gemini disks.
Configuration, logging, maintenance schedules, and subsystem documentation are to be kept in the commercial relational database.
4.2.5.2 Hardware Standards
Only the development systems are considered here. Installed systems are to be chosen later, based on available technology and experiences with the development systems.
4.2.5.2.1
The computer hardware used for development must conform to the following:
A. Workstations must match specified software standards and present a well-designed development environment, including cross-support for VxWorks development, if needed.
B. Workstations are expected to be state-of-the-art systems (CPU, communications support) in a scaleable family. This allows the migration of development systems to advancing technology.
C. It is assumed that workstations support Ethernet IEEE-802.3 and FDDI interfaces for communications.
D. Internal data formats must be compatible across workstations used for development. 
E. SCSI-interface peripherals are to be available.
F.Reliability, manufacturer support, and upgrade capability of the development systems will be considered when selecting the final target systems.
4.2.5.2.2 Development computers
The following recommendations are made: 
A.Workstations.
  1. Where Gemini is providing the computer equipment as part of a contractual agreement, the developmental workstations are to be SUN SPARC-10 (model 41) or SPARC Classic with 64MB of dynamic memory.
  2. Internal Gemini software development is done in a multi-platform environment, enabling final selection of target machines to be made based on experiences with development equipment.
B. Peripherals
  1. Workstations are to have at least 2GB of disk.
  2. DDS DAT cartridges are to be available for data acquisition on development systems, backups, and possibly for software transport (Internet is the preferred means of transport).
  3. A CD-ROM is needed for SUN OS and software upgrades.
  4. Any compression on a transport medium is to be done using a standard commonly
available algorithm and archives are to be in tar format
C. IOCs.
  1. Where Gemini is providing the IOC CPU as part of a contractual agreement, the development systems are to be Motorola MVME-167B (68040@33MHz) with at least 16MB of dynamic memory.
  2. The IOC computer cards for development work are defined in the ICS work package description.
  3. The target IOC computer cards are not to be established until as late as possible, to take advantage of technology advances while staying compatible with the development systems. A baseline system is included as part of the ICS work package.
4.2.5.2.3 Electronics hardware interfaces 
All accesses to the control electronics hardware will be through VME IOC's, using the EPICS software. No other control interfaces are permitted.
4.2.5.3 Sub-Network
There are places in the Gemini system where software exists below the IOC level that is interfaced to IOC software. The standards for this interface is not part of this specification. The use of this software is to be explained and discussed on a case-by-case basis.
In cases where there is a distributed network of target microprocessors involved at this level, it is appropriate to provide a standard sub-network. This type of Fieldbus is to be implemented using an ALAN/BRADLEY bus, ProfiBus, or other approved Fieldbus.
In cases where there is a distributed set of commercial equipment to be controlled the recommended method is to use an ALAN/BRADLEY system to control the equipment manually and interface to it using RS-422 or similar connection to an IOC.
4.2.5.4 Communication Hardware
All communication hardware must meet the data flow requirements and software protocols defined in this document. The following recommendations are based on currently available technology. It is entirely appropriate that changes will be made to take advantages of changes to that technology.
A. The control LAN is based on Ethernet IEEE 802.3.
B. The Time distribution systems are described in the Software Design Description..
C. The detector LAN is also based on Ethernet, at least for the development systems. A solution meeting the performance requirements of the final system is to be decided later.
D. The backbone LAN cannot be Ethernet because of bandwidth requirements. A FDDI system is recommended for the backbone LAN.
E. Cabling of LANs is shown in Figure 4 - 1. Also shown are cabling requirements to the base facility. Requirements for cabling are given in the Electronic Design Specification.
F. Interlock connections must be provided for all critical subsystems. The software interface to the interlock system is defined in the Instrument Control System Infrastructure Work Package Definition.
G. Routers, gateways, etc. are defined in the Electronic Design Specification. Their logical placements are shown in Figure 4 - 1, above.
H. Links to the WAN are defined in the Electronic Design Specification and shown in Figure 4 - 1, above. There is a requirement of at least one dedicated link of a T1 bandwidth for remote support, development and testing.                                 
4.2.5.5 Re-use of Existing Software
Wherever possible, Gemini software is to take advantage of existing software. However, all existing software is to be evaluated in terms of the specifications given here. This helps reduce life-cycle costs and maintenance efforts.
4.2.6 Life cycle constraints 
Life cycle constraints are discussed in the Gemini Software Management Plan.

4.3 User Requirements for EPICS Developers 
The Experimental Physics and Industrial Control System (EPICS) toolkit is the foundation of the Gemini control system. EPICS was originally developed at the Los Alamos and Argonne National Laboratories for use in large accelerator control and diagnostics systems. It is now an established standard within the international High Energy Physics community and is gaining acceptance amongst astronomical sites.
Within the EPICS community there is understood to be an informal distinction between two classes of developers, labeled ‘Internals’ and ‘Applications’. Although these definitions are nowhere written down, this understanding serves as the basis for many discussions with the community and for the nature of training classes.
4.3.1 EPICS Components 
Note: The bulk of this section is taken from the EPICS document ‘EPICS Overview’. EPICS consists of a set of hardware and software components from which a control system can be created.
4.3.1.1 Hardware Components 
  • OPI Operator Interface.
    This is a UNIX based workstation which can run various EPICS tools.
  • IOC Input Output Controller.
    This is VME/VXI based chassis containing a Motorola 68xxx processor, various I/O modules, and VME modules that provide access to other I/O buses such as GPIB.
  • LAN Local area network.
    This is the communication network which allows the IOCs and OPIs to communicate. EPICS provides a software component, Channel Access, which provides network transparent communication between a Channel Access client and an arbitrary number of Channel Access servers.
4.3.1.2 Software Components 
4.3.12.1 IOC Software
Database
The heart of an IOC is a memory resident database together with various memory resident structures describing the contents of the database. EPICS supports a large and extensible set of record types, e.g. ai (Analog Input), ao (Analog Output), etc.
Each record type has a fixed set of fields. Some fields are common to all record types and others are specific to particular record types. Every record has a record name and every field has a field name. The first field of every database record holds the record name, which must be unique across all IOCs attached to the same TCP/IP subnet.
A number of data structures are provided so that the database can be accessed efficiently. Most software components, because they access the database via database access routines, do not need to be aware of these structures.
Database Access
With the exception of record and device support, all access to the database is via the channel or database access routines.
Database Scanning
Database scanning is the mechanism for deciding when to process a record. Four types of scanning are possible: Periodic, Event, I/O Event, and Passive.
Periodic: A request can be made to process a record periodically. A number of time intervals are supported.
Event: Event scanning is based on the posting of an event by any IOC software component. The actual subroutine call is: post_event(event_num)
I/O Event: The I/O event scanning system processes records based on external interrupts. An IOC device driver interrupt routine must be available to accept the external interrupts.
Passive: Passive records are processed as a result of linked records being processed or as a result of external changes such as channel access puts.
Record Support, Device Support, and Device Drivers
In order to remove record specific knowledge from database access, each record type has an associated record support module. Similarly, in order to remove device specific knowledge from record support, each record type can have a set of device support modules. If the method of accessing hardware is complicated, a device driver can be provided to shield the device support modules. Many record types, in particular all types not associated with hardware, do not have device support or drivers.
The IOC software is designed so that the database access layer knows nothing about the record support layer other than how to call it. The record support layer in turn knows nothing about it’s device support layer other than how to call it. Similarly the only thing a device support layer knows about it’s associated driver is how to call it. This design allows a particular installation and even a particular IOC within an installation to choose the set of record types, device types, and drivers it wishes to use. The remainder of the IOC system software is unaffected.
Every record support module must provide a record processing routine. It is this routine that is called by the database scanners. Record processing consists of some combination of a standard set of functions.
Database Monitors
The routines described in this section provide a callback mechanism for database value changes. This allows the caller to be notified when database values change without constantly polling the database. A mask can be set to specify value changes, alarm state changes, and/or archive changes.
At the present time only channel access uses database monitors. No other software should use the database monitors. Because they are of interest only to channel access, the monitor routines will not be described.
4.3.1.2.2 Channel Access
Channel access provides network transparent access to IOC databases. It is based on a client-server model. Each IOC provides a channel access server which is willing to establish communication with an arbitrary number of clients. Channel access client services are available on both OPIs and IOCs. A client can communicate with an arbitrary number of servers.
It should be noted that channel access does not provide access to database records as records. This is a deliberate design decision. This allows new record types to be added without impacting any software that accesses the database via channel access. A channel access client can communicate with multiple IOCs having differing sets of record types.
4.3.1.2.3 OPI Tools
EPICS provides a number of OPI based tools. These can be divided into two groups based on whether or not they use channel access. Channel access tools are real time tools, i.e. they are used to monitor and control IOCs.
Channel Access Tools
• MEDM
  Motif version of combined display manager and display editor.
• DM Display Manager.
  This tool reads one or more display list files created by EDD, establishes communication with all necessary IOCs, establishes monitors on process variables, accepts operator control requests, and updates the display to reflect all changes.
• ALH Alarm Handler.
  This is a general purpose alarm handler driven by an alarm configuration file.
• AR Archiver.
  This is a general purpose tool to acquire and save data from IOCs.
• Sequencer
  A tool which runs in an IOC or OPI and emulates a finite state machine.
• Other OPI CA clients
  It is possible to interface preexisting software systems to the channel access library. This has been done for several commercial packages including IDL/ PvWave, Mathematica, and WINGZ to allow access and manipulation of EPICS process variables by these applications.
Other OPI Tools
• DCT Database Configuration Tool.
  This tool is used to create a run time database for an IOC
• CAPFAST and GDCT Graphical Database Configuration Tools These tools are used to create a run time database for an IOC
• EDD Display Editor.
  This tool is used to create a display list file for the Display Manager. A display list file contains a list of static, monitor, and control elements. Each monitor and control element has an associated process variable.
• SNC State Notation Compiler.
  It generates a C program that represents the states for the IOC or OPI Sequencer tool.
• Build Tools
  Tools are available to create the various database components from ASCII definition
files.
• Source/Release
  EPICS provides a Source/Release mechanism for managing EPICS.
4.3.1.2.4 EPICS Core Software
EPICS consists of a set of core software and a set of optional components. The core software, i.e. the components of EPICS without which EPICS would not function, are:
• Channel Access - Client and Server software 
• Database
• Scanners
• Monitors
• DCT
• Build Tools
• Source/Release
All other software components are optional. Of course any application developer would be crazy to ignore tools such as MEDM (or EDD/DM). Likewise an application developer would not start from scratch developing record and device support. Most OPI tools do not, however, have to be used. Likewise any given record support module, device support module, or driver could be deleted from a particular IOC and EPICS will still function.

4.3.2 GEMINI Breakdown of Tasks
Each of the Gemini Controls work packages will be involved with some aspect of EPICS development ranging from creation of new device drivers to database creation and the design of new CA clients.
The details of the EPICS work required can be broken down into several broad categories which reflect the nature of the various work packages. This breakdown is given in the following subsections:
4.3.2.1 Not covered by any work packages
• Channel Access - Client and Server Software, Scanners, Monitors Gemini will not modify the heart of EPICS. We leave this to Los Alamos.
• Host-based Development Tools (CAPFAST, EDD, etc.) Neither will Gemini plan on creating new development tools.
4.3.2.2 SIC work package only
• Record Support, Device Support, and Device Drivers For Gemini this entails support for new devices: PMAC, VMIC5578, BANCOMM
4.3.2.3 OCS and DHS work packages only
• Other OPI CA Clients
  The OCS may need a CA client that implements the OCS Attribute/Value protocol.
  The DHS may need a CA client that gathers logging information. This could be an EPICS AR (or AR_cmd) task.
4.3.2.4 Real-time (IOC-based) work packages 
• IOC Database
• IOC SNC programs
• Files associated with OPI Channel Access Tools
  These would include MEDM .adl display definition files, PvWave/IDL scripts, AR request files, ALH alarm configuration files, and the like.
                                                                                                                                                                                                                                                 
4.3.3 GEMINI Definitions 
For the purposes of work performed for the Gemini 8-m Telescopes Project the following definitions will be used to differentiate between the two flavors of EPICS development work:
Internals work would include any of the following:
  Channel Access - Client and Server Software, Scanners, Monitors • Record Support, Device Support, and Device Drivers
  Host-based Development Tools (CAPFAST, EDD, etc.)
  Other OPI CA Clients
The first two items would be suitable topics for an advanced EPICS course on EPICS System Development. The latter two items would be covered under Advanced Application Development and a case can probably be made that they constitute a category unto themselves which should be labeled something like ‘Internals - Tools’
Applications work would then include any of:
  IOC Database
  IOC or OPI SNC programs
  Files associated with OPI Channel Access Tools
These are all topics that would be covered in an EPICS Basics, Building and Using Applications course.
4.3.4 Required Developer Skills 
For each class of developer a specific set of skills is required. The following sections list those that would be commonly used.
4.3.4.1 Applications Developer
  Knowledge of VME and other I/O electronics • EPICS Database design techniques
  SNC programming
  Use of standard EPICS OPI tools
  Basic knowledge of UNIX and VxWorks as development environments
4.3.4.2 Internals Developer 
  Advanced C/C++ programming techniques • UNIX internals
  VxWorks internals
  Real-time programming techniques
  Motif application development skills
  Networking skills: TCP/P and UDP/IP sockets
4.3.4.3 Expected Distribution of Developer Classes
4.3.4.3.1 Current Distribution Within the High Energy Physics Community
The experience of the High Energy Physics community is that only a core group of Internals developers is required for maintenance and enhancement of EPICS IOC software and of the standard development and CA client tool set. Specifically, the IOC core software is almost exclusively in the domain of the Los Alamos AOT-8 office.
Two major flavors of development tools are in use with support coming from key groups within Los Alamos and Argonne.
Many sites contribute custom CA client tools as this generally involves C or C++ programming under a UNIX O/S to interface to the standard CA library.
In addition, many sites create their own database record types and new device support and driver layers.
Although there is presently a large amount of activity in the enhancement of EPICS Internals software especially in the fields of non-IOC core software, this is an order of magnitude less than the amount of Applications work under way at over 20 distinct programs.
4.3.4.3.2 The APS CATS Experience
Another large group of predominately Applications developers that are starting work are the Collaborative Access Teams (CATS) at Argonne’s Advanced Photon Source (APS).
The APS is a facility to produce high brilliance X-rays for a variety of experiments and includes 36 experimental halls with 2 lines each. As of March 1994, there were 15 CATS at the APS with most CATS responsible for a single sector (2 beamlines). Each CAT has its own funding for designing/building/operating the physical beamline, instrumentation, controls, and data acquisition systems.
Because the experimental areas must be coordinated with the main facility control system and since 25% of the beamtime must be made available to independent investigators it was strongly recommended that EPICS be used as the toolkit for all CATS development work. Not only would this simplify the integration with the central control system but would also provide a common environment for facility visitors.
Typically, each CAT has 1 or 2 developers, and the major focus is not on the IOC software although some new records, like the Multichannel Analyser, have been created, but rather on the OPI CA client applications. Heavy use is being made of both Tcl/TK and IDL to support high-level sequencing and data reduction. This is similar to the Gemini architecture as the bulk of the control system intelligence is contained within OPI CA client tasks.
Other items of concern are:
  Different science programs in use at each CAT which have complex associated data acquisition and reduction routines.
  The creation of large data sets.
  Simultaneous local and remote monitoring and intervention.
  Ease of use for one-time users.
  Data export to home institutions.
4.3.4.3.3 Planned Distribution Within the Gemini Project
The Standard Instrument Controller work package is tasked with laying the Internals ground work for all other Gemini control system work packages. In this project, the only required IOC-based Internals work is the creation of record, device, and driver support for three VME I/O cards. It is anticipated that all other IOC-related work packages will be performing exclusively Applications work.
In the advent of future work packages requiring Internals work it is planned the RGO SIC development staff will be made available. In this way the number of Internals staff is kept at a minimum.
                                                                                                                                            
                                                                                           
5. Commands
5.1 Command Routing
There are several means of transmitting commands and data across the Gemini system:
A. Direct: A command source may directly specify the target subsystem. This is the most common means of command transfer from the Observatory Control System to the subsystems.
B. Channel: Commands and data may be routed through a channel. This mechanism requires that some (unknown to the source) target subsystem has been attached to the channel as the target. It is possible that the channel is 'intelligent', in the sense that data may be converted from one form to another during transmission. This might be implemented by connecting two channels with a conversion module. An example of a channel connection might be the data stream between the A&G system and the Primary Mirror Control System. The A&G might be transmitting Zernickes to the PMCS, which is receiving Shack-Hartmann data. The intelligent channel would be responsible for the conversion. It is possible that a channel have multiple sources, multiple targets, or both! Finally, a channel might use a separate physical route, to prevent large data transmissions (say) from interfering with the 'normal' command streams.
C. Broadcast: Some commands and data signals are simply broadcast across the control system. Any subsystem may examine these communications and respond or ignore as appropriate. For example, the OCS might broadcast a RunTest command, causing all subsystems to perform self-testing. As another example, a critical system failure might cause a ShutDown command to be broadcast.
                                                                      
5.2 Command Structure
All commands contain the same general structure:
  Identification: 
    Command_ID
    Source 
    Target
The Command_ID is an identification that is unique to that specific instance of each command. A portion of the ID is monotonically increasing and functions as a timestamp for journalling and tracing. This is to be implemented using a technique analogous to the CFHT odometer.
The Source and Target fields indicate the originator and the recipient for the command, as expected. The Target may be a specific recipient, a Channel, or simply a Broadcast, but the Source is always the origination point of the command.
  Instruction: 
    Opcode
    Parameter set
The remainder of the command provides the body of the command. The Parameter list structure is dependent on the Opcode.

5.3 General Purpose Commands 
This section presents the “generic” commands that all Gemini systems must respond to. There are also “Control Commands” common to all Gemini systems to provide specific functionality during observing. These control commands are presented in the Gemini Software Design Description. Specific commands are presented in the Software Design Descriptions for the individual subsystems.
5.3.1 Status Commands 
The following commands are “status” queries used to obtain information about the state of the subsystem.
GetVersion The subsystem returns its version identification as a string value. 
GetStatus The subsystem reports its current status as one of:
  DOWN - the subsystem is not operational
  BOOTED - the subsystem has been booted, but not yet configured
  CONFIGURING - the system is in the process of configuring (Steven).
  CONFIGURED - the subsystem is configured, but not yet initialized
  INITIALIZING - the subsystem is doing initialization actions
  RUNNING - the subsystem is running at observing level
  MAINTENANCE - the subsystem is running at maintenance level
  SIMULATION - the subsystem is running in simulation mode
  DISABLED - the subsystem is functional, but has been commanded to ignore control commands
  SHUTDOWN - the subsystem is in the process of shutting down 
  LOCKED - an interlock exists on this subsystem.
GetState The internal state of the subsystem is returned as one of: 
  READY - the subsystem is fully operational, but currently idle.
  BUSY_ON command - the subsystem is working, and currently processing the indicated command.
  NOT_READY - the subsystem is not responding to commands at this time. A GetStatus command can be used to determine the current status.
GetID The subsystem reports its unique identification tag.
GetConfiguration Detailed configuration information is provided. This configuration information includes details of any settings internal configurations (filters, positions, etc.) and, if requested, the detailed results of any self-tests.
5.3.2 Generic Commands 
The following commands affect the behavior of a subsystem independently of the specific task of that subsystem.
SetStatus The target subsystem is to enter the state associated with the specified status argument. For example, SetStatus SIMULATION causes the targeted subsystem(s) to enter simulation mode. Setting the status to SHUTDOWN disables a subsystem. Not all status levels are reachable through SetStatus.
SetConfiguration This command directs the downloading of a configuration from the host to the target subsystem. It is important that care be taken to avoid configuration values that would result in motion, etc. This command can operate with the Get- Configuration command given above to provide 'sequencing points' for subsystem restarts or roll backs.
RunTest The subsystem runs a self-test and reports the result as one of:
  OK - the subsystem has detected no problems, it is running within specifications
  BAD - the subsystem has detected problems that prevent its successful operation
  WARNING - the subsystem has detected a problem that may prevent it from operating to full specification, but does not prevent it from functioning at this time
There may be an argument describing a particular self-test to run. The individual self-tests are specific to the subsystem and are given in the appropriate Work Package Description. Detailed results of self-tests are available through the GetConfiguration command.
SetLogging Logging by the indicated subsystem is set to occur at the specified level.

5.4 Data Communications 
Communication of information is similar across all systems in the Gemini controls network. Instances of this communication is via routes, which may be direct channels, intelligent channels, or broadcasts. Communication via a route is typically asynchronous, with commands available to establish synchronization as needed.
  - OpenRoute. A route of the indicated class is being established for some item. The command includes sufficient information on the route to permit the IOC to communicate through the route. The 'route' may be a specific subsystem, channel, or broadcast.
  - CloseRoute. A previously-opened route is being closed. Modules at either end of the channel are notified and take appropriate action.
  - ResetRoute. The route is to be reinitialized. Modules receiving this command are to flush buffers associated with this route and reset operating parameters to initial conditions.
  - TestRoute. A test message is transmitted across the route. All receivers on the route are to respond with an identification.
  - AwaitItem. The module sending this command is blocked until information is received via the indicated route, or a timeout occurs.
  - SetCallback. A callback is established to process data across the indicated route. 
  - ClearCallback. A previously established callback is removed.

5.5 IOC Commands
The following commands are common to all IOC-based subsystems. (Most control subsystems are IOC-based.) These commands are processed by the IOC subsystem.
5.5.1 Local Database Access
IOC crates in the Gemini system have local databases. Under the Gemini control system, it is expected that the majority of subsystem control is accomplished through these databases. The following commands provide access to those databases.
  - LocateItem. If the IOC local database contains the requested item, it responds with an identification sufficient for establishing a route to that item. The LocateItem may be broadcast through the IOC network.
  - GetValue. The value of the specified item is obtained. PutValue A value is transmitted for the specified item.
  - StartStream. A stream of data is transmitted through the indicated route. The IOC system continues to transmit data values until a StopStream command is received.
  - StopStream. The indicated data stream is terminated.
  - SetEvent. An event is established as a monitor of some database entry. Appropriate
changes to that entry are to result in the indicated event being transmitted. 
  - ClearEvent. A previously set event is terminated.
5.5.2 Time Handling
Time synchronization is commonly required among control subsystems. These commands are to permit appropriate time synchronizations. Times will be provided in IRIG-B format as UTC.
TBD
5.5.3 Remote DB Access
Some subsystems may need to obtain information from other systems within the Gemini control system. This access is accomplished using the same communication and database access commands as given above.

5.6 Command Implementation 
Within the OCS, all commands are represented as ASCII strings. Fields within the command are labelled and nesting is permitted using braces ({ , }). For example, a typical command might be:

Ident={ID=314159 Source=Operator_Console Target=BROADCAST} Instruction=ShutDown

Details of the implementation are the province of the OCS work package developers, who are responsible for providing procedures for constructing/deconstructing/routing command strings. The mappings of specific IOC commands between ASCII strings and EPICS channel access calls are determined by the individual IOC subsystem developers. Work Package Descriptions include baseline command descriptions that need to be implemented for that specific work package.
                                                                                                                               